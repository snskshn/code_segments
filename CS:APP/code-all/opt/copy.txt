.Ldebug_abbrev0:
.Ldebug_info0:
.Ldebug_line0:
.Ltext0:
stationary_clear:
	testl	%edx, %edx
	jle	.L3
	movl	$0, (%rsi)
.L3:
	rep
	ret

stationary_copy:
	testl	%edx, %edx
	jle	.L7
	movl	$0, %ecx
.L6:
	movl	(%rdi), %eax
	movl	%eax, (%rsi)
	addl	$1, %ecx
	cmpl	%ecx, %edx
	jg	.L6
.L7:
	rep
	ret

write_read:
	testl	%edx, %edx
	je	.L12
	movl	$0, %eax
.L11:
	movl	%eax, (%rsi)
	movl	(%rdi), %eax
	addl	$1, %eax
	subl	$1, %edx
	jne	.L11
.L12:
	rep
	ret

moving_copy:
	testl	%edx, %edx
	jle	.L17
	movl	$0, %ecx
.L16:
	movl	(%rdi,%rcx,4), %eax
	movl	%eax, (%rsi,%rcx,4)
	addq	$1, %rcx
	cmpl	%ecx, %edx
	jg	.L16
.L17:
	rep
	ret

moving_clear:
	testl	%edx, %edx
	jle	.L22
	movl	$0, %eax
.L21:
	movl	$0, (%rsi,%rax,4)
	addq	$1, %rax
	cmpl	%eax, %edx
	jg	.L21
.L22:
	rep
	ret

copy_array:
	testl	%edx, %edx
	jle	.L27
	movl	$0, %ecx
.L26:
	movl	(%rdi,%rcx,4), %eax
	movl	%eax, (%rsi,%rcx,4)
	addq	$1, %rcx
	cmpl	%ecx, %edx
	jg	.L26
.L27:
	rep
	ret

array_clear:
	testl	%edx, %edx
	jle	.L32
	movl	$0, %eax
.L31:
	movl	$0, (%rsi,%rax,4)
	addq	$1, %rax
	cmpl	%eax, %edx
	jg	.L31
.L32:
	rep
	ret

array_clear_8:
	leal	-7(%rdx), %edi
	movl	$0, %ecx
	testl	%edi, %edi
	jle	.L36
.L42:
	movslq	%ecx,%rax
	movl	$0, (%rsi,%rax,4)
	movl	$0, 4(%rsi,%rax,4)
	movl	$0, 8(%rsi,%rax,4)
	movl	$0, 12(%rsi,%rax,4)
	movl	$0, 16(%rsi,%rax,4)
	movl	$0, 20(%rsi,%rax,4)
	movl	$0, 24(%rsi,%rax,4)
	movl	$0, 28(%rsi,%rax,4)
	addl	$8, %ecx
	cmpl	%ecx, %edi
	jg	.L42
.L36:
	cmpl	%ecx, %edx
	jle	.L40
.L41:
	movslq	%ecx,%rax
	movl	$0, (%rsi,%rax,4)
	addl	$1, %ecx
	cmpl	%ecx, %edx
	jg	.L41
.L40:
	rep
	ret

stationary_clear_2:
	leal	-1(%rdx), %ecx
	movl	$0, %eax
	testl	%ecx, %ecx
	jle	.L47
.L51:
	addl	$2, %eax
	cmpl	%eax, %ecx
	jg	.L51
	movl	$0, (%rsi)
.L47:
	cmpl	%eax, %edx
	jle	.L50
	movl	$0, (%rsi)
.L50:
	rep
	ret

stationary_copy_2:
	leal	-1(%rdx), %r8d
	movl	$0, %ecx
	testl	%r8d, %r8d
	jle	.L55
.L61:
	movl	(%rdi), %eax
	movl	%eax, (%rsi)
	movl	(%rdi), %eax
	movl	%eax, (%rsi)
	addl	$2, %ecx
	cmpl	%ecx, %r8d
	jg	.L61
.L55:
	cmpl	%ecx, %edx
	jle	.L59
.L60:
	movl	(%rdi), %eax
	movl	%eax, (%rsi)
	addl	$1, %ecx
	cmpl	%ecx, %edx
	jg	.L60
.L59:
	rep
	ret

moving_copy_2:
	leal	-1(%rdx), %ecx
	movl	$0, %r8d
	testl	%ecx, %ecx
	jle	.L66
.L71:
	movl	(%rdi), %eax
	movl	%eax, (%rsi)
	movl	4(%rdi), %eax
	movl	%eax, 4(%rsi)
	addq	$8, %rsi
	addq	$8, %rdi
	addl	$2, %r8d
	cmpl	%r8d, %ecx
	jg	.L71
.L66:
	cmpl	%r8d, %edx
	jle	.L70
	movl	$0, %ecx
	subl	$1, %edx
	movl	%edx, %r11d
	subl	%r8d, %r11d
	mov	%r11d, %r10d
	leaq	1(%r10), %r9
	leaq	0(,%r9,4), %r8
.L69:
	movl	(%rdi,%rcx), %eax
	movl	%eax, (%rsi,%rcx)
	addq	$4, %rcx
	cmpq	%r8, %rcx
	jne	.L69
.L70:
	rep
	ret

moving_clear_2:
	leal	-1(%rdx), %eax
	movl	$0, %ecx
	testl	%eax, %eax
	jle	.L76
.L81:
	movl	$0, (%rsi)
	movl	$0, 4(%rsi)
	addq	$8, %rsi
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jg	.L81
.L76:
	cmpl	%ecx, %edx
	jle	.L80
	movq	%rsi, %rax
	subl	$1, %edx
	movl	%edx, %r10d
	subl	%ecx, %r10d
	mov	%r10d, %r9d
	leaq	1(%r9), %r8
	leaq	0(,%r8,4), %rdi
	leaq	(%rsi,%rdi), %rcx
.L79:
	movl	$0, (%rax)
	addq	$4, %rax
	cmpq	%rcx, %rax
	jne	.L79
.L80:
	rep
	ret

array_copy_2:
	movl	%edx, %r9d
	leal	-1(%r9), %r10d
	movl	$0, %r8d
	testl	%r10d, %r10d
	jle	.L86
.L92:
	movslq	%r8d,%rax
	leaq	0(,%rax,4), %rcx
	movl	(%rdi,%rcx), %edx
	movl	%edx, (%rsi,%rcx)
	leaq	4(,%rax,4), %rax
	movl	(%rdi,%rax), %edx
	movl	%edx, (%rsi,%rax)
	addl	$2, %r8d
	cmpl	%r8d, %r10d
	jg	.L92
.L86:
	cmpl	%r8d, %r9d
	jle	.L90
.L91:
	movslq	%r8d,%rax
	salq	$2, %rax
	movl	(%rdi,%rax), %edx
	movl	%edx, (%rsi,%rax)
	addl	$1, %r8d
	cmpl	%r8d, %r9d
	jg	.L91
.L90:
	rep
	ret

array_clear_2:
	leal	-1(%rdx), %edi
	movl	$0, %ecx
	testl	%edi, %edi
	jle	.L97
.L103:
	movslq	%ecx,%rax
	movl	$0, (%rsi,%rax,4)
	movl	$0, 4(%rsi,%rax,4)
	addl	$2, %ecx
	cmpl	%ecx, %edi
	jg	.L103
.L97:
	cmpl	%ecx, %edx
	jle	.L101
.L102:
	movslq	%ecx,%rax
	movl	$0, (%rsi,%rax,4)
	addl	$1, %ecx
	cmpl	%ecx, %edx
	jg	.L102
.L101:
	rep
	ret

stationary_clear_4:
	leal	-3(%rdx), %ecx
	movl	$0, %eax
	testl	%ecx, %ecx
	jle	.L108
.L112:
	addl	$4, %eax
	cmpl	%eax, %ecx
	jg	.L112
	movl	$0, (%rsi)
.L108:
	cmpl	%eax, %edx
	jle	.L111
	movl	$0, (%rsi)
.L111:
	rep
	ret

stationary_copy_4:
	leal	-3(%rdx), %r8d
	movl	$0, %ecx
	testl	%r8d, %r8d
	jle	.L116
.L122:
	movl	(%rdi), %eax
	movl	%eax, (%rsi)
	movl	(%rdi), %eax
	movl	%eax, (%rsi)
	movl	(%rdi), %eax
	movl	%eax, (%rsi)
	movl	(%rdi), %eax
	movl	%eax, (%rsi)
	addl	$4, %ecx
	cmpl	%ecx, %r8d
	jg	.L122
.L116:
	cmpl	%ecx, %edx
	jle	.L120
.L121:
	movl	(%rdi), %eax
	movl	%eax, (%rsi)
	addl	$1, %ecx
	cmpl	%ecx, %edx
	jg	.L121
.L120:
	rep
	ret

moving_copy_4:
	leal	-3(%rdx), %ecx
	movl	$0, %r8d
	testl	%ecx, %ecx
	jle	.L127
.L132:
	movl	(%rdi), %eax
	movl	%eax, (%rsi)
	movl	4(%rdi), %eax
	movl	%eax, 4(%rsi)
	movl	8(%rdi), %eax
	movl	%eax, 8(%rsi)
	movl	12(%rdi), %eax
	movl	%eax, 12(%rsi)
	addq	$16, %rsi
	addq	$16, %rdi
	addl	$4, %r8d
	cmpl	%r8d, %ecx
	jg	.L132
.L127:
	cmpl	%r8d, %edx
	jle	.L131
	movl	$0, %ecx
	subl	$1, %edx
	movl	%edx, %r11d
	subl	%r8d, %r11d
	mov	%r11d, %r10d
	leaq	1(%r10), %r9
	leaq	0(,%r9,4), %r8
.L130:
	movl	(%rdi,%rcx), %eax
	movl	%eax, (%rsi,%rcx)
	addq	$4, %rcx
	cmpq	%r8, %rcx
	jne	.L130
.L131:
	rep
	ret

moving_clear_4:
	leal	-3(%rdx), %eax
	movl	$0, %ecx
	testl	%eax, %eax
	jle	.L137
.L142:
	movl	$0, (%rsi)
	movl	$0, 4(%rsi)
	movl	$0, 8(%rsi)
	movl	$0, 12(%rsi)
	addq	$16, %rsi
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jg	.L142
.L137:
	cmpl	%ecx, %edx
	jle	.L141
	movq	%rsi, %rax
	subl	$1, %edx
	movl	%edx, %r10d
	subl	%ecx, %r10d
	mov	%r10d, %r9d
	leaq	1(%r9), %r8
	leaq	0(,%r8,4), %rdi
	leaq	(%rsi,%rdi), %rcx
.L140:
	movl	$0, (%rax)
	addq	$4, %rax
	cmpq	%rcx, %rax
	jne	.L140
.L141:
	rep
	ret

array_copy_4:
	movl	%edx, %r9d
	leal	-3(%r9), %r10d
	movl	$0, %r8d
	testl	%r10d, %r10d
	jle	.L147
.L153:
	movslq	%r8d,%rax
	leaq	0(,%rax,4), %rcx
	movl	(%rdi,%rcx), %edx
	movl	%edx, (%rsi,%rcx)
	leaq	4(,%rax,4), %rcx
	movl	(%rdi,%rcx), %edx
	movl	%edx, (%rsi,%rcx)
	leaq	8(,%rax,4), %rcx
	movl	(%rdi,%rcx), %edx
	movl	%edx, (%rsi,%rcx)
	leaq	12(,%rax,4), %rax
	movl	(%rdi,%rax), %edx
	movl	%edx, (%rsi,%rax)
	addl	$4, %r8d
	cmpl	%r8d, %r10d
	jg	.L153
.L147:
	cmpl	%r8d, %r9d
	jle	.L151
.L152:
	movslq	%r8d,%rax
	salq	$2, %rax
	movl	(%rdi,%rax), %edx
	movl	%edx, (%rsi,%rax)
	addl	$1, %r8d
	cmpl	%r8d, %r9d
	jg	.L152
.L151:
	rep
	ret

array_clear_4:
	leal	-3(%rdx), %edi
	movl	$0, %ecx
	testl	%edi, %edi
	jle	.L158
.L164:
	movslq	%ecx,%rax
	movl	$0, (%rsi,%rax,4)
	movl	$0, 4(%rsi,%rax,4)
	movl	$0, 8(%rsi,%rax,4)
	movl	$0, 12(%rsi,%rax,4)
	addl	$4, %ecx
	cmpl	%ecx, %edi
	jg	.L164
.L158:
	cmpl	%ecx, %edx
	jle	.L162
.L163:
	movslq	%ecx,%rax
	movl	$0, (%rsi,%rax,4)
	addl	$1, %ecx
	cmpl	%ecx, %edx
	jg	.L163
.L162:
	rep
	ret

test2a:
	subq	$8, %rsp
	movslq	idx(%rip),%rax
	movl	%edi, %edx
	movl	$data, %esi
	movq	%rsi, %rdi
	call	*copier(,%rax,8)
	addq	$8, %rsp
	ret

test2b:
	subq	$8, %rsp
	movslq	idx(%rip),%rax
	movl	%edi, %edx
	movl	$data+4, %esi
	movl	$data, %edi
	call	*copier(,%rax,8)
	addq	$8, %rsp
	ret

test2c:
	subq	$8, %rsp
	movslq	idx(%rip),%rax
	movl	%edi, %edx
	movl	$data, %esi
	movl	$data+4, %edi
	call	*copier(,%rax,8)
	addq	$8, %rsp
	ret

test2d:
	subq	$8, %rsp
	movslq	idx(%rip),%rax
	movl	%edi, %edx
	movl	$data2, %esi
	movl	$data, %edi
	call	*copier(,%rax,8)
	addq	$8, %rsp
	ret

mem_clear:
	subq	$8, %rsp
	movq	%rsi, %rdi
	movslq	%edx,%rdx
	salq	$2, %rdx
	movl	$0, %esi
	call	memset
	addq	$8, %rsp
	ret

run_test:
	pushq	%r12
	pushq	%rbx
	subq	$8, %rsp
	movl	%edi, %r12d
	movslq	%esi,%rbx
	movq	case_descr(,%rbx,8), %rcx
	movslq	%edi,%rax
	movq	test_descr(,%rax,8), %rdx
	movl	$.LC0, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	movl	%r12d, idx(%rip)
	movq	case_fun(,%rbx,8), %rdi
	movl	$1024, %esi
	call	find_cpe
	movl	$.LC1, %esi
	movl	$1, %edi
	movl	$1, %eax
	call	__printf_chk
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	ret

main:
	pushq	%rbx
	movl	$0, %ebx
	jmp	.L180
.L185:
	movl	$0, %eax
	popq	%rbx
	ret

.L180:
	movl	$0, %esi
	movl	%ebx, %edi
	call	run_test
	movl	$1, %esi
	movl	%ebx, %edi
	call	run_test
	movl	$2, %esi
	movl	%ebx, %edi
	call	run_test
	movl	$3, %esi
	movl	%ebx, %edi
	call	run_test
	addl	$1, %ebx
	cmpl	$21, %ebx
	jne	.L180
	jmp	.L185
idx:
case_descr:
test_descr:
case_fun:
copier:
.Lframe0:
.Lframe1:
.Letext0:
.Ldebug_loc0:
