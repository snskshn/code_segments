Double Sum combine1: Maximum use of data abstraction:
29.17 cycles/element
Double Sum combine2: Take vec_length() out of loop:
26.95 cycles/element
Double Sum combine3: Array reference to vector data:
11.00 cycles/element
Double Sum combine4: Array reference, accumulate in temporary:
10.96 cycles/element
Double Sum combine4p: Pointer reference, accumulate in temporary:
10.04 cycles/element
Double Sum unroll2a: Array code, unrolled by 2:
6.86 cycles/element
Double Sum combine5p: Pointer code, unrolled by 3, for loop:
5.36 cycles/element
Double Sum unroll3aw: Array code, unrolled by 3, while loop:
8.04 cycles/element
Double Sum unroll4a: Array code, unrolled by 4:
6.55 cycles/element
Double Sum unroll8a: Array code, unrolled by 8:
6.53 cycles/element
Double Sum unroll16a: Array code, unrolled by 16:
6.52 cycles/element
Double Sum unroll2: Pointer code, unrolled by 2:
10.04 cycles/element
Double Sum unroll3: Pointer code, unrolled by 3:
10.04 cycles/element
Double Sum unroll4: Pointer code, unrolled by 4:
10.02 cycles/element
Double Sum unroll8: Pointer code, unrolled by 8:
10.03 cycles/element
Double Sum unroll16: Pointer code, unrolled by 16:
10.02 cycles/element
Double Sum combine6: Array code, unrolled by 2, Superscalar x2:
7.48 cycles/element
Double Sum unroll4x2a: Array code, unrolled by 4, Superscalar x2:
6.10 cycles/element
Double Sum unroll8x2a: Array code, unrolled by 8, Superscalar x2:
5.55 cycles/element
Double Sum unroll3x3a: Array code, unrolled by 3, Superscalar x3:
6.01 cycles/element
Double Sum unroll4x4a: Array code, unrolled by 4, Superscalar x4:
5.31 cycles/element
Double Sum unroll8x4a: Array code, unrolled by 8, Superscalar x4:
4.99 cycles/element
Double Sum unroll6x6a: Array code, unrolled by 6, Superscalar x6:
4.78 cycles/element
Double Sum unroll8x8a: Array code, unrolled by 8, Superscalar x8:
4.65 cycles/element
Double Sum unroll10x10a: Array code, unrolled by 10, Superscalar x10:
4.50 cycles/element
Double Sum unroll2x6a: Array code, unrolled by 12, Superscalar x6:
4.89 cycles/element
Double Sum unroll12x12a: Array code, unrolled by 12, Superscalar x12:
4.38 cycles/element
Double Sum unroll8x2: Pointer code, unrolled by 8, Superscalar x2:
5.02 cycles/element
Double Sum unroll8x4: Pointer code, unrolled by 8, Superscalar x4:
4.04 cycles/element
Double Sum unroll8x8: Pointer code, unrolled by 8, Superscalar x8:
3.54 cycles/element
Double Sum unroll9x3: Pointer code, unrolled by 9, Superscalar x3:
4.16 cycles/element
Double Sum unrollx2as: Array code, Unroll x2, Superscalar x2, noninterleaved:
7.32 cycles/element
Double Sum unroll2aa: Array code, unrolled by 2, different associativity:
3.77 cycles/element
Double Sum unroll3aa: Array code, unrolled by 3, Different Associativity:
3.01 cycles/element
Double Sum unroll4aa: Array code, unrolled by 4, Different Associativity:
3.19 cycles/element
Double Sum unroll6aa: Array code, unrolled by 6, Different Associativity:
2.78 cycles/element
Double Sum unroll8aa: Array code, unrolled by 8, Different Associativity:
2.93 cycles/element
Double Sum unrollv1: SSE code, 1*VSIZE-way parallelism:
2.89 cycles/element
Double Sum unrollv2: SSE code, 2*VSIZE-way parallelism:
2.19 cycles/element
Double Sum unrollv4: SSE code, 4*VSIZE-way parallelism:
1.79 cycles/element
Double Sum unrollv8: SSE code, 8*VSIZE-way parallelism:
1.36 cycles/element
Double Sum unrollv12: SSE code, 12*VSIZE-way parallelism:
1.26 cycles/element
Double Sum unrollv2a: SSE code, 2*VSIZE-way parallelism, reassociate:
2.01 cycles/element
Double Sum unrollv4a: SSE code, 4*VSIZE-way parallelism, reassociate:
1.61 cycles/element
Double Sum unrollv8a: SSE code, 8*VSIZE-way parallelism, reassociate:
1.11 cycles/element
