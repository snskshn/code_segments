.Ldebug_abbrev0:
.Ldebug_info0:
.Ldebug_line0:
.Ltext0:
register_combiners:
	subq	$8, %rsp
	movl	$combine1_descr, %edx
	movl	$combine1, %esi
	movq	%rsi, %rdi
	call	add_combiner
	movl	$combine2_descr, %edx
	movl	$combine1, %esi
	movl	$combine2, %edi
	call	add_combiner
	movl	$combine3_descr, %edx
	movl	$combine1, %esi
	movl	$combine3, %edi
	call	add_combiner
	movl	$combine3w_descr, %edx
	movl	$combine1, %esi
	movl	$combine3w, %edi
	call	add_combiner
	movl	$combine4_descr, %edx
	movl	$combine1, %esi
	movl	$combine4, %edi
	call	add_combiner
	movl	$combine4b_descr, %edx
	movl	$combine1, %esi
	movl	$combine4b, %edi
	call	add_combiner
	movl	$combine4p_descr, %edx
	movl	$combine1, %esi
	movl	$combine4p, %edi
	call	add_combiner
	movl	$combine5_descr, %edx
	movl	$combine1, %esi
	movl	$combine5, %edi
	call	add_combiner
	movl	$combine5p_descr, %edx
	movl	$combine1, %esi
	movl	$combine5p, %edi
	call	add_combiner
	movl	$unroll2aw_descr, %edx
	movl	$combine1, %esi
	movl	$unroll2aw_combine, %edi
	call	add_combiner
	movl	$unroll3a_descr, %edx
	movl	$combine1, %esi
	movl	$unroll3a_combine, %edi
	call	add_combiner
	movl	$unroll4a_descr, %edx
	movl	$combine1, %esi
	movl	$unroll4a_combine, %edi
	call	add_combiner
	movl	$unroll5a_descr, %edx
	movl	$combine1, %esi
	movl	$unroll5a_combine, %edi
	call	add_combiner
	movl	$unroll6a_descr, %edx
	movl	$combine1, %esi
	movl	$unroll6a_combine, %edi
	call	add_combiner
	movl	$unroll8a_descr, %edx
	movl	$combine1, %esi
	movl	$unroll8a_combine, %edi
	call	add_combiner
	movl	$unroll16a_descr, %edx
	movl	$combine1, %esi
	movl	$unroll16a_combine, %edi
	call	add_combiner
	movl	$unroll2_descr, %edx
	movl	$combine1, %esi
	movl	$unroll2_combine, %edi
	call	add_combiner
	movl	$unroll3_descr, %edx
	movl	$combine1, %esi
	movl	$unroll3_combine, %edi
	call	add_combiner
	movl	$unroll4_descr, %edx
	movl	$combine1, %esi
	movl	$unroll4_combine, %edi
	call	add_combiner
	movl	$unroll8_descr, %edx
	movl	$combine1, %esi
	movl	$unroll8_combine, %edi
	call	add_combiner
	movl	$unroll16_descr, %edx
	movl	$combine1, %esi
	movl	$unroll16_combine, %edi
	call	add_combiner
	movl	$combine6_descr, %edx
	movl	$combine1, %esi
	movl	$combine6, %edi
	call	add_combiner
	movl	$unroll4x2a_descr, %edx
	movl	$combine1, %esi
	movl	$unroll4x2a_combine, %edi
	call	add_combiner
	movl	$unroll8x2a_descr, %edx
	movl	$combine1, %esi
	movl	$unroll8x2a_combine, %edi
	call	add_combiner
	movl	$unroll3x3a_descr, %edx
	movl	$combine1, %esi
	movl	$unroll3x3a_combine, %edi
	call	add_combiner
	movl	$unroll4x4a_descr, %edx
	movl	$combine1, %esi
	movl	$unroll4x4a_combine, %edi
	call	add_combiner
	movl	$unroll5x5a_descr, %edx
	movl	$combine1, %esi
	movl	$unroll5x5a_combine, %edi
	call	add_combiner
	movl	$unroll6x6a_descr, %edx
	movl	$combine1, %esi
	movl	$unroll6x6a_combine, %edi
	call	add_combiner
	movl	$unroll8x4a_descr, %edx
	movl	$combine1, %esi
	movl	$unroll8x4a_combine, %edi
	call	add_combiner
	movl	$unroll8x8a_descr, %edx
	movl	$combine1, %esi
	movl	$unroll8x8a_combine, %edi
	call	add_combiner
	movl	$unroll10x10a_descr, %edx
	movl	$combine1, %esi
	movl	$unroll10x10a_combine, %edi
	call	add_combiner
	movl	$unroll12x6a_descr, %edx
	movl	$combine1, %esi
	movl	$unroll12x6a_combine, %edi
	call	add_combiner
	movl	$unroll12x12a_descr, %edx
	movl	$combine1, %esi
	movl	$unroll12x12a_combine, %edi
	call	add_combiner
	movl	$unroll8x2_descr, %edx
	movl	$combine1, %esi
	movl	$unroll8x2_combine, %edi
	call	add_combiner
	movl	$unroll8x4_descr, %edx
	movl	$combine1, %esi
	movl	$unroll8x4_combine, %edi
	call	add_combiner
	movl	$unroll8x8_descr, %edx
	movl	$combine1, %esi
	movl	$unroll8x8_combine, %edi
	call	add_combiner
	movl	$unroll9x3_descr, %edx
	movl	$combine1, %esi
	movl	$unroll9x3_combine, %edi
	call	add_combiner
	movl	$unrollx2as_descr, %edx
	movl	$combine1, %esi
	movl	$unrollx2as_combine, %edi
	call	add_combiner
	movl	$combine7_descr, %edx
	movl	$combine1, %esi
	movl	$combine7, %edi
	call	add_combiner
	movl	$unroll3aa_descr, %edx
	movl	$combine1, %esi
	movl	$unroll3aa_combine, %edi
	call	add_combiner
	movl	$unroll4aa_descr, %edx
	movl	$combine1, %esi
	movl	$unroll4aa_combine, %edi
	call	add_combiner
	movl	$unroll5aa_descr, %edx
	movl	$combine1, %esi
	movl	$unroll5aa_combine, %edi
	call	add_combiner
	movl	$unroll6aa_descr, %edx
	movl	$combine1, %esi
	movl	$unroll6aa_combine, %edi
	call	add_combiner
	movl	$unroll8aa_descr, %edx
	movl	$combine1, %esi
	movl	$unroll8aa_combine, %edi
	call	add_combiner
	movl	$simd_v1_descr, %edx
	movl	$combine1, %esi
	movl	$simd_v1_combine, %edi
	call	add_combiner
	movl	$simd_v2_descr, %edx
	movl	$combine1, %esi
	movl	$simd_v2_combine, %edi
	call	add_combiner
	movl	$simd_v4_descr, %edx
	movl	$combine1, %esi
	movl	$simd_v4_combine, %edi
	call	add_combiner
	movl	$simd_v8_descr, %edx
	movl	$combine1, %esi
	movl	$simd_v8_combine, %edi
	call	add_combiner
	movl	$simd_v12_descr, %edx
	movl	$combine1, %esi
	movl	$simd_v12_combine, %edi
	call	add_combiner
	movl	$simd_v2a_descr, %edx
	movl	$combine1, %esi
	movl	$simd_v2a_combine, %edi
	call	add_combiner
	movl	$simd_v4a_descr, %edx
	movl	$combine1, %esi
	movl	$simd_v4a_combine, %edi
	call	add_combiner
	movl	$simd_v8a_descr, %edx
	movl	$combine1, %esi
	movl	$simd_v8a_combine, %edi
	call	add_combiner
	movsd	.LC0(%rip), %xmm1
	movsd	.LC1(%rip), %xmm0
	movl	$simd_v8a_combine, %edi
	call	log_combiner
	addq	$8, %rsp
	ret

simd_v8a_combine:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$16, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r12
	call	get_vec_start
	movq	%rax, %rbp
	movq	%rbx, %rdi
	call	vec_length
	movq	%rax, %rdx
	movl	%eax, %esi
	movl	$0x3f800000, %eax
	movl	%eax, (%rsp)
	movl	%eax, 4(%rsp)
	movl	%eax, 8(%rsp)
	movl	%eax, 12(%rsp)
	movaps	(%rsp), %xmm4
	testb	$15, %bpl
	je	.L13
	testl	%edx, %edx
	jne	.L4
.L13:
	movss	.LC2(%rip), %xmm3
	jmp	.L6
.L4:
	movss	.LC2(%rip), %xmm3
	movl	$0, %ecx
	leal	-1(%rdx), %edi
.L7:
	mulss	(%rbp), %xmm3
	addq	$4, %rbp
	subl	$1, %esi
	testb	$15, %bpl
	setne	%dl
	cmpl	%ecx, %edi
	setne	%al
	addq	$1, %rcx
	testb	%al, %dl
	jne	.L7
.L6:
	cmpl	$31, %esi
	jle	.L8
	movq	%rbp, %rcx
	movl	%esi, %edi
	leal	-32(%rsi), %eax
	shrl	$5, %eax
	mov	%eax, %eax
	salq	$7, %rax
	leaq	128(%rax,%rbp), %rdx
.L9:
	movaps	(%rcx), %xmm2
	mulps	16(%rcx), %xmm2
	movaps	32(%rcx), %xmm0
	mulps	48(%rcx), %xmm0
	mulps	%xmm0, %xmm2
	movaps	64(%rcx), %xmm1
	mulps	80(%rcx), %xmm1
	movaps	96(%rcx), %xmm0
	mulps	112(%rcx), %xmm0
	mulps	%xmm0, %xmm1
	mulps	%xmm1, %xmm2
	mulps	%xmm2, %xmm4
	subq	$-128, %rcx
	movl	%edi, %eax
	cmpq	%rdx, %rcx
	jne	.L9
	leal	-32(%rax), %edx
	shrl	$5, %edx
	movl	%edx, %eax
	sall	$5, %eax
	negl	%eax
	leal	-32(%rsi,%rax), %esi
	mov	%edx, %edx
	salq	$7, %rdx
	leaq	128(%rdx,%rbp), %rbp
.L8:
	testl	%esi, %esi
	je	.L10
	movq	%rbp, %rdx
	leal	-1(%rsi), %eax
	leaq	4(%rbp,%rax,4), %rax
.L11:
	mulss	(%rdx), %xmm3
	addq	$4, %rdx
	cmpq	%rax, %rdx
	jne	.L11
.L10:
	movaps	%xmm4, (%rsp)
	movaps	%xmm3, %xmm0
	mulss	(%rsp), %xmm0
	mulss	4(%rsp), %xmm0
	mulss	8(%rsp), %xmm0
	mulss	12(%rsp), %xmm0
	movss	%xmm0, (%r12)
	addq	$16, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

simd_v4a_combine:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$16, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r12
	call	get_vec_start
	movq	%rax, %rbp
	movq	%rbx, %rdi
	call	vec_length
	movq	%rax, %rdx
	movl	%eax, %esi
	movl	$0x3f800000, %eax
	movl	%eax, (%rsp)
	movl	%eax, 4(%rsp)
	movl	%eax, 8(%rsp)
	movl	%eax, 12(%rsp)
	movaps	(%rsp), %xmm3
	testb	$15, %bpl
	je	.L27
	testl	%edx, %edx
	jne	.L18
.L27:
	movss	.LC2(%rip), %xmm2
	jmp	.L20
.L18:
	movss	.LC2(%rip), %xmm2
	movl	$0, %ecx
	leal	-1(%rdx), %edi
.L21:
	mulss	(%rbp), %xmm2
	addq	$4, %rbp
	subl	$1, %esi
	testb	$15, %bpl
	setne	%dl
	cmpl	%ecx, %edi
	setne	%al
	addq	$1, %rcx
	testb	%al, %dl
	jne	.L21
.L20:
	cmpl	$15, %esi
	jle	.L22
	movq	%rbp, %rcx
	movl	%esi, %edi
	leal	-16(%rsi), %eax
	shrl	$4, %eax
	mov	%eax, %eax
	salq	$6, %rax
	leaq	64(%rax,%rbp), %rdx
.L23:
	movaps	(%rcx), %xmm1
	mulps	16(%rcx), %xmm1
	movaps	32(%rcx), %xmm0
	mulps	48(%rcx), %xmm0
	mulps	%xmm0, %xmm1
	mulps	%xmm1, %xmm3
	addq	$64, %rcx
	movl	%edi, %eax
	cmpq	%rdx, %rcx
	jne	.L23
	leal	-16(%rax), %edx
	shrl	$4, %edx
	movl	%edx, %eax
	sall	$4, %eax
	negl	%eax
	leal	-16(%rsi,%rax), %esi
	mov	%edx, %edx
	salq	$6, %rdx
	leaq	64(%rdx,%rbp), %rbp
.L22:
	testl	%esi, %esi
	je	.L24
	movq	%rbp, %rdx
	leal	-1(%rsi), %eax
	leaq	4(%rbp,%rax,4), %rax
.L25:
	mulss	(%rdx), %xmm2
	addq	$4, %rdx
	cmpq	%rax, %rdx
	jne	.L25
.L24:
	movaps	%xmm3, (%rsp)
	movaps	%xmm2, %xmm0
	mulss	(%rsp), %xmm0
	mulss	4(%rsp), %xmm0
	mulss	8(%rsp), %xmm0
	mulss	12(%rsp), %xmm0
	movss	%xmm0, (%r12)
	addq	$16, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

simd_v2a_combine:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$16, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r12
	call	get_vec_start
	movq	%rax, %rbp
	movq	%rbx, %rdi
	call	vec_length
	movq	%rax, %rdx
	movl	%eax, %esi
	movl	$0x3f800000, %eax
	movl	%eax, (%rsp)
	movl	%eax, 4(%rsp)
	movl	%eax, 8(%rsp)
	movl	%eax, 12(%rsp)
	movaps	(%rsp), %xmm2
	testb	$15, %bpl
	je	.L41
	testl	%edx, %edx
	jne	.L32
.L41:
	movss	.LC2(%rip), %xmm1
	jmp	.L34
.L32:
	movss	.LC2(%rip), %xmm1
	movl	$0, %ecx
	leal	-1(%rdx), %edi
.L35:
	mulss	(%rbp), %xmm1
	addq	$4, %rbp
	subl	$1, %esi
	testb	$15, %bpl
	setne	%dl
	cmpl	%ecx, %edi
	setne	%al
	addq	$1, %rcx
	testb	%al, %dl
	jne	.L35
.L34:
	cmpl	$7, %esi
	jle	.L36
	movq	%rbp, %rcx
	movl	%esi, %edi
	leal	-8(%rsi), %eax
	shrl	$3, %eax
	mov	%eax, %eax
	salq	$5, %rax
	leaq	32(%rax,%rbp), %rdx
.L37:
	movaps	(%rcx), %xmm0
	mulps	16(%rcx), %xmm0
	mulps	%xmm0, %xmm2
	addq	$32, %rcx
	movl	%edi, %eax
	cmpq	%rdx, %rcx
	jne	.L37
	leal	-8(%rax), %edx
	shrl	$3, %edx
	leal	0(,%rdx,8), %eax
	negl	%eax
	leal	-8(%rsi,%rax), %esi
	mov	%edx, %edx
	salq	$5, %rdx
	leaq	32(%rdx,%rbp), %rbp
.L36:
	testl	%esi, %esi
	je	.L38
	movq	%rbp, %rdx
	leal	-1(%rsi), %eax
	leaq	4(%rbp,%rax,4), %rax
.L39:
	mulss	(%rdx), %xmm1
	addq	$4, %rdx
	cmpq	%rax, %rdx
	jne	.L39
.L38:
	movaps	%xmm2, (%rsp)
	movaps	%xmm1, %xmm0
	mulss	(%rsp), %xmm0
	mulss	4(%rsp), %xmm0
	mulss	8(%rsp), %xmm0
	mulss	12(%rsp), %xmm0
	movss	%xmm0, (%r12)
	addq	$16, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

simd_v12_combine:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$16, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r12
	call	get_vec_start
	movq	%rax, %rbp
	movq	%rbx, %rdi
	call	vec_length
	movq	%rax, %rdx
	movl	%eax, %edi
	movl	$0x3f800000, %eax
	movl	%eax, (%rsp)
	movl	%eax, 4(%rsp)
	movl	%eax, 8(%rsp)
	movl	%eax, 12(%rsp)
	movaps	(%rsp), %xmm0
	testb	$15, %bpl
	je	.L56
	testl	%edx, %edx
	jne	.L46
.L56:
	movss	.LC2(%rip), %xmm12
	jmp	.L48
.L46:
	movss	.LC2(%rip), %xmm12
	movl	$0, %ecx
	leal	-1(%rdx), %esi
.L49:
	mulss	(%rbp), %xmm12
	addq	$4, %rbp
	subl	$1, %edi
	testb	$15, %bpl
	setne	%dl
	cmpl	%ecx, %esi
	setne	%al
	addq	$1, %rcx
	testb	%al, %dl
	jne	.L49
.L48:
	cmpl	$47, %edi
	jg	.L50
	movaps	%xmm0, %xmm11
	movaps	%xmm0, %xmm10
	movaps	%xmm0, %xmm1
	movaps	%xmm0, %xmm9
	movaps	%xmm0, %xmm8
	movaps	%xmm0, %xmm7
	movaps	%xmm0, %xmm6
	movaps	%xmm0, %xmm5
	movaps	%xmm0, %xmm4
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
	jmp	.L51
.L50:
	movaps	%xmm0, %xmm11
	movaps	%xmm0, %xmm10
	movaps	%xmm0, %xmm1
	movaps	%xmm0, %xmm9
	movaps	%xmm0, %xmm8
	movaps	%xmm0, %xmm7
	movaps	%xmm0, %xmm6
	movaps	%xmm0, %xmm5
	movaps	%xmm0, %xmm4
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
	movq	%rbp, %rcx
	movl	%edi, %esi
	leal	-48(%rdi), %edx
	movl	$-1431655765, %eax
	mull	%edx
	shrl	$5, %edx
	mov	%edx, %edx
	leaq	3(%rdx,%rdx,2), %rdx
	salq	$6, %rdx
	leaq	(%rbp,%rdx), %rdx
.L52:
	mulps	(%rcx), %xmm0
	mulps	16(%rcx), %xmm11
	mulps	32(%rcx), %xmm10
	mulps	48(%rcx), %xmm1
	mulps	64(%rcx), %xmm9
	mulps	80(%rcx), %xmm8
	mulps	96(%rcx), %xmm7
	mulps	112(%rcx), %xmm6
	mulps	128(%rcx), %xmm5
	mulps	144(%rcx), %xmm4
	mulps	160(%rcx), %xmm3
	mulps	176(%rcx), %xmm2
	addq	$192, %rcx
	movl	%esi, %eax
	cmpq	%rdx, %rcx
	jne	.L52
	leal	-48(%rax), %edx
	movl	$-1431655765, %eax
	mull	%edx
	shrl	$5, %edx
	leal	(%rdx,%rdx,2), %eax
	sall	$4, %eax
	negl	%eax
	leal	-48(%rdi,%rax), %edi
	mov	%edx, %edx
	leaq	3(%rdx,%rdx,2), %rdx
	salq	$6, %rdx
	addq	%rdx, %rbp
.L51:
	testl	%edi, %edi
	je	.L53
	movq	%rbp, %rcx
	leal	-1(%rdi), %eax
	leaq	4(%rbp,%rax,4), %rax
.L54:
	mulss	(%rcx), %xmm12
	addq	$4, %rcx
	cmpq	%rax, %rcx
	jne	.L54
.L53:
	mulps	%xmm11, %xmm0
	mulps	%xmm10, %xmm1
	mulps	%xmm1, %xmm0
	movaps	%xmm9, %xmm1
	mulps	%xmm8, %xmm1
	mulps	%xmm1, %xmm0
	movaps	%xmm7, %xmm1
	mulps	%xmm6, %xmm1
	mulps	%xmm1, %xmm0
	movaps	%xmm5, %xmm1
	mulps	%xmm4, %xmm1
	mulps	%xmm1, %xmm0
	movaps	%xmm3, %xmm1
	mulps	%xmm2, %xmm1
	mulps	%xmm1, %xmm0
	movaps	%xmm0, (%rsp)
	movaps	%xmm12, %xmm0
	mulss	(%rsp), %xmm0
	mulss	4(%rsp), %xmm0
	mulss	8(%rsp), %xmm0
	mulss	12(%rsp), %xmm0
	movss	%xmm0, (%r12)
	addq	$16, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

simd_v8_combine:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$16, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r12
	call	get_vec_start
	movq	%rax, %rbp
	movq	%rbx, %rdi
	call	vec_length
	movq	%rax, %rdx
	movl	%eax, %esi
	movl	$0x3f800000, %eax
	movl	%eax, (%rsp)
	movl	%eax, 4(%rsp)
	movl	%eax, 8(%rsp)
	movl	%eax, 12(%rsp)
	movaps	(%rsp), %xmm0
	testb	$15, %bpl
	je	.L71
	testl	%edx, %edx
	jne	.L61
.L71:
	movss	.LC2(%rip), %xmm8
	jmp	.L63
.L61:
	movss	.LC2(%rip), %xmm8
	movl	$0, %ecx
	leal	-1(%rdx), %edi
.L64:
	mulss	(%rbp), %xmm8
	addq	$4, %rbp
	subl	$1, %esi
	testb	$15, %bpl
	setne	%dl
	cmpl	%ecx, %edi
	setne	%al
	addq	$1, %rcx
	testb	%al, %dl
	jne	.L64
.L63:
	cmpl	$31, %esi
	jg	.L65
	movaps	%xmm0, %xmm7
	movaps	%xmm0, %xmm6
	movaps	%xmm0, %xmm1
	movaps	%xmm0, %xmm5
	movaps	%xmm0, %xmm4
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
	jmp	.L66
.L65:
	movaps	%xmm0, %xmm7
	movaps	%xmm0, %xmm6
	movaps	%xmm0, %xmm1
	movaps	%xmm0, %xmm5
	movaps	%xmm0, %xmm4
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
	movq	%rbp, %rcx
	movl	%esi, %edi
	leal	-32(%rsi), %eax
	shrl	$5, %eax
	mov	%eax, %eax
	salq	$7, %rax
	leaq	128(%rax,%rbp), %rdx
.L67:
	mulps	(%rcx), %xmm0
	mulps	16(%rcx), %xmm7
	mulps	32(%rcx), %xmm6
	mulps	48(%rcx), %xmm1
	mulps	64(%rcx), %xmm5
	mulps	80(%rcx), %xmm4
	mulps	96(%rcx), %xmm3
	mulps	112(%rcx), %xmm2
	subq	$-128, %rcx
	movl	%edi, %eax
	cmpq	%rdx, %rcx
	jne	.L67
	leal	-32(%rax), %edx
	shrl	$5, %edx
	movl	%edx, %eax
	sall	$5, %eax
	negl	%eax
	leal	-32(%rsi,%rax), %esi
	mov	%edx, %edx
	salq	$7, %rdx
	leaq	128(%rdx,%rbp), %rbp
.L66:
	testl	%esi, %esi
	je	.L68
	movq	%rbp, %rdx
	leal	-1(%rsi), %eax
	leaq	4(%rbp,%rax,4), %rax
.L69:
	mulss	(%rdx), %xmm8
	addq	$4, %rdx
	cmpq	%rax, %rdx
	jne	.L69
.L68:
	mulps	%xmm7, %xmm0
	mulps	%xmm6, %xmm1
	mulps	%xmm1, %xmm0
	movaps	%xmm5, %xmm1
	mulps	%xmm4, %xmm1
	mulps	%xmm1, %xmm0
	movaps	%xmm3, %xmm1
	mulps	%xmm2, %xmm1
	mulps	%xmm1, %xmm0
	movaps	%xmm0, (%rsp)
	movaps	%xmm8, %xmm0
	mulss	(%rsp), %xmm0
	mulss	4(%rsp), %xmm0
	mulss	8(%rsp), %xmm0
	mulss	12(%rsp), %xmm0
	movss	%xmm0, (%r12)
	addq	$16, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

simd_v4_combine:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$16, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r12
	call	get_vec_start
	movq	%rax, %rbp
	movq	%rbx, %rdi
	call	vec_length
	movq	%rax, %rdx
	movl	%eax, %esi
	movl	$0x3f800000, %eax
	movl	%eax, (%rsp)
	movl	%eax, 4(%rsp)
	movl	%eax, 8(%rsp)
	movl	%eax, 12(%rsp)
	movaps	(%rsp), %xmm0
	testb	$15, %bpl
	je	.L86
	testl	%edx, %edx
	jne	.L76
.L86:
	movss	.LC2(%rip), %xmm4
	jmp	.L78
.L76:
	movss	.LC2(%rip), %xmm4
	movl	$0, %ecx
	leal	-1(%rdx), %edi
.L79:
	mulss	(%rbp), %xmm4
	addq	$4, %rbp
	subl	$1, %esi
	testb	$15, %bpl
	setne	%dl
	cmpl	%ecx, %edi
	setne	%al
	addq	$1, %rcx
	testb	%al, %dl
	jne	.L79
.L78:
	cmpl	$15, %esi
	jg	.L80
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm1
	jmp	.L81
.L80:
	movq	%rbp, %rcx
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm1
	movl	%esi, %edi
	leal	-16(%rsi), %eax
	shrl	$4, %eax
	mov	%eax, %eax
	salq	$6, %rax
	leaq	64(%rax,%rbp), %rdx
.L82:
	mulps	(%rcx), %xmm0
	mulps	16(%rcx), %xmm3
	mulps	32(%rcx), %xmm2
	mulps	48(%rcx), %xmm1
	addq	$64, %rcx
	movl	%edi, %eax
	cmpq	%rdx, %rcx
	jne	.L82
	leal	-16(%rax), %edx
	shrl	$4, %edx
	movl	%edx, %eax
	sall	$4, %eax
	negl	%eax
	leal	-16(%rsi,%rax), %esi
	mov	%edx, %edx
	salq	$6, %rdx
	leaq	64(%rdx,%rbp), %rbp
.L81:
	testl	%esi, %esi
	je	.L83
	movq	%rbp, %rdx
	leal	-1(%rsi), %eax
	leaq	4(%rbp,%rax,4), %rax
.L84:
	mulss	(%rdx), %xmm4
	addq	$4, %rdx
	cmpq	%rax, %rdx
	jne	.L84
.L83:
	mulps	%xmm3, %xmm0
	mulps	%xmm2, %xmm1
	mulps	%xmm1, %xmm0
	movaps	%xmm0, (%rsp)
	movaps	%xmm4, %xmm0
	mulss	(%rsp), %xmm0
	mulss	4(%rsp), %xmm0
	mulss	8(%rsp), %xmm0
	mulss	12(%rsp), %xmm0
	movss	%xmm0, (%r12)
	addq	$16, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

simd_v2_combine:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$16, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r12
	call	get_vec_start
	movq	%rax, %rbp
	movq	%rbx, %rdi
	call	vec_length
	movq	%rax, %rdx
	movl	%eax, %esi
	movl	$0x3f800000, %eax
	movl	%eax, (%rsp)
	movl	%eax, 4(%rsp)
	movl	%eax, 8(%rsp)
	movl	%eax, 12(%rsp)
	movaps	(%rsp), %xmm1
	testb	$15, %bpl
	je	.L101
	testl	%edx, %edx
	jne	.L91
.L101:
	movss	.LC2(%rip), %xmm2
	jmp	.L93
.L91:
	movss	.LC2(%rip), %xmm2
	movl	$0, %ecx
	leal	-1(%rdx), %edi
.L94:
	mulss	(%rbp), %xmm2
	addq	$4, %rbp
	subl	$1, %esi
	testb	$15, %bpl
	setne	%dl
	cmpl	%ecx, %edi
	setne	%al
	addq	$1, %rcx
	testb	%al, %dl
	jne	.L94
.L93:
	movaps	%xmm1, %xmm0
	movq	%rbp, %rcx
	cmpl	$7, %esi
	jle	.L96
	movl	%esi, %edi
	leal	-8(%rsi), %eax
	shrl	$3, %eax
	mov	%eax, %eax
	salq	$5, %rax
	leaq	32(%rax,%rbp), %rdx
.L102:
	mulps	(%rcx), %xmm1
	mulps	16(%rcx), %xmm0
	addq	$32, %rcx
	movl	%edi, %eax
	cmpq	%rdx, %rcx
	jne	.L102
	leal	-8(%rax), %edx
	shrl	$3, %edx
	leal	0(,%rdx,8), %eax
	negl	%eax
	leal	-8(%rsi,%rax), %esi
	mov	%edx, %edx
	salq	$5, %rdx
	leaq	32(%rdx,%rbp), %rbp
.L96:
	testl	%esi, %esi
	je	.L98
	movq	%rbp, %rdx
	leal	-1(%rsi), %eax
	leaq	4(%rbp,%rax,4), %rax
.L99:
	mulss	(%rdx), %xmm2
	addq	$4, %rdx
	cmpq	%rax, %rdx
	jne	.L99
.L98:
	mulps	%xmm1, %xmm0
	movaps	%xmm0, (%rsp)
	movaps	%xmm2, %xmm0
	mulss	(%rsp), %xmm0
	mulss	4(%rsp), %xmm0
	mulss	8(%rsp), %xmm0
	mulss	12(%rsp), %xmm0
	movss	%xmm0, (%r12)
	addq	$16, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

simd_v1_combine:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$16, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r12
	call	get_vec_start
	movq	%rax, %rbp
	movq	%rbx, %rdi
	call	vec_length
	movq	%rax, %rdx
	movl	%eax, %esi
	movl	$0x3f800000, %eax
	movl	%eax, (%rsp)
	movl	%eax, 4(%rsp)
	movl	%eax, 8(%rsp)
	movl	%eax, 12(%rsp)
	movaps	(%rsp), %xmm1
	testb	$15, %bpl
	je	.L116
	testl	%edx, %edx
	jne	.L107
.L116:
	movss	.LC2(%rip), %xmm0
	jmp	.L109
.L107:
	movss	.LC2(%rip), %xmm0
	movl	$0, %ecx
	leal	-1(%rdx), %edi
.L110:
	mulss	(%rbp), %xmm0
	addq	$4, %rbp
	subl	$1, %esi
	testb	$15, %bpl
	setne	%dl
	cmpl	%ecx, %edi
	setne	%al
	addq	$1, %rcx
	testb	%al, %dl
	jne	.L110
.L109:
	cmpl	$3, %esi
	jle	.L111
	movq	%rbp, %rcx
	movl	%esi, %edi
	leal	-4(%rsi), %eax
	shrl	$2, %eax
	mov	%eax, %eax
	salq	$4, %rax
	leaq	16(%rax,%rbp), %rdx
.L112:
	mulps	(%rcx), %xmm1
	addq	$16, %rcx
	movl	%edi, %eax
	cmpq	%rdx, %rcx
	jne	.L112
	leal	-4(%rax), %edx
	shrl	$2, %edx
	leal	0(,%rdx,4), %eax
	negl	%eax
	leal	-4(%rsi,%rax), %esi
	mov	%edx, %edx
	salq	$4, %rdx
	leaq	16(%rdx,%rbp), %rbp
.L111:
	testl	%esi, %esi
	je	.L113
	movq	%rbp, %rdx
	leal	-1(%rsi), %eax
	leaq	4(%rbp,%rax,4), %rax
.L114:
	mulss	(%rdx), %xmm0
	addq	$4, %rdx
	cmpq	%rax, %rdx
	jne	.L114
.L113:
	movaps	%xmm1, (%rsp)
	mulss	(%rsp), %xmm0
	mulss	4(%rsp), %xmm0
	mulss	8(%rsp), %xmm0
	mulss	12(%rsp), %xmm0
	movss	%xmm0, (%r12)
	addq	$16, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

unroll8aa_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-7(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L121
	movl	$0, %edx
	movss	.LC2(%rip), %xmm3
	jmp	.L122
.L121:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm3
.L123:
	movss	(%rax,%rdx,4), %xmm2
	mulss	4(%rax,%rdx,4), %xmm2
	movss	8(%rax,%rdx,4), %xmm0
	mulss	12(%rax,%rdx,4), %xmm0
	mulss	%xmm0, %xmm2
	movss	16(%rax,%rdx,4), %xmm1
	mulss	20(%rax,%rdx,4), %xmm1
	movss	24(%rax,%rdx,4), %xmm0
	mulss	28(%rax,%rdx,4), %xmm0
	mulss	%xmm0, %xmm1
	mulss	%xmm1, %xmm2
	mulss	%xmm2, %xmm3
	addq	$8, %rdx
	cmpq	%rdx, %r12
	jg	.L123
.L122:
	cmpq	%rdx, %rbp
	jle	.L124
	leaq	(%rax,%rdx,4), %rax
.L125:
	mulss	(%rax), %xmm3
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L125
.L124:
	movss	%xmm3, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll6aa_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-5(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L130
	movl	$0, %edx
	movss	.LC2(%rip), %xmm2
	jmp	.L131
.L130:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm2
.L132:
	movss	(%rax,%rdx,4), %xmm0
	mulss	4(%rax,%rdx,4), %xmm0
	movss	8(%rax,%rdx,4), %xmm1
	mulss	12(%rax,%rdx,4), %xmm1
	mulss	%xmm1, %xmm0
	movss	16(%rax,%rdx,4), %xmm1
	mulss	20(%rax,%rdx,4), %xmm1
	mulss	%xmm1, %xmm0
	mulss	%xmm0, %xmm2
	addq	$6, %rdx
	cmpq	%rdx, %r12
	jg	.L132
.L131:
	cmpq	%rdx, %rbp
	jle	.L133
	leaq	(%rax,%rdx,4), %rax
.L134:
	mulss	(%rax), %xmm2
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L134
.L133:
	movss	%xmm2, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll5aa_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-4(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L139
	movl	$0, %edx
	movss	.LC2(%rip), %xmm2
	jmp	.L140
.L139:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm2
.L141:
	movss	(%rax,%rdx,4), %xmm0
	mulss	4(%rax,%rdx,4), %xmm0
	movss	8(%rax,%rdx,4), %xmm1
	mulss	12(%rax,%rdx,4), %xmm1
	mulss	%xmm1, %xmm0
	mulss	16(%rax,%rdx,4), %xmm0
	mulss	%xmm0, %xmm2
	addq	$5, %rdx
	cmpq	%rdx, %r12
	jg	.L141
.L140:
	cmpq	%rdx, %rbp
	jle	.L142
	leaq	(%rax,%rdx,4), %rax
.L143:
	mulss	(%rax), %xmm2
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L143
.L142:
	movss	%xmm2, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll4aa_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-3(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L148
	movl	$0, %edx
	movss	.LC2(%rip), %xmm2
	jmp	.L149
.L148:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm2
.L150:
	movss	(%rax,%rdx,4), %xmm1
	mulss	4(%rax,%rdx,4), %xmm1
	movss	8(%rax,%rdx,4), %xmm0
	mulss	12(%rax,%rdx,4), %xmm0
	mulss	%xmm0, %xmm1
	mulss	%xmm1, %xmm2
	addq	$4, %rdx
	cmpq	%rdx, %r12
	jg	.L150
.L149:
	cmpq	%rdx, %rbp
	jle	.L151
	leaq	(%rax,%rdx,4), %rax
.L152:
	mulss	(%rax), %xmm2
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L152
.L151:
	movss	%xmm2, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll3aa_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-2(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L157
	movl	$0, %edx
	movss	.LC2(%rip), %xmm1
	jmp	.L158
.L157:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm1
.L159:
	movss	(%rax,%rdx,4), %xmm0
	mulss	4(%rax,%rdx,4), %xmm0
	mulss	8(%rax,%rdx,4), %xmm0
	mulss	%xmm0, %xmm1
	addq	$3, %rdx
	cmpq	%rdx, %r12
	jg	.L159
.L158:
	cmpq	%rdx, %rbp
	jle	.L160
	leaq	(%rax,%rdx,4), %rax
.L161:
	mulss	(%rax), %xmm1
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L161
.L160:
	movss	%xmm1, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

combine7:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-1(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L166
	movss	.LC2(%rip), %xmm1
	movl	$0, %edx
	jmp	.L167
.L166:
	movss	.LC2(%rip), %xmm1
	movl	$0, %edx
/* $begin fpb-combine7-s 1329 */
# combine7: data_t = float, OP = *
# i in \rdxreg, data in \raxreg, limit in \rxiireg, acc in %xmm1
.L168:				      # \textbf{loop:}
	movss	(%rax,%rdx,4), %xmm0	# Get data[i]
	mulss	4(%rax,%rdx,4), %xmm0   # Multiply by data[i+1]
	mulss	%xmm0, %xmm1		# Multiply acc by product
	addq	$2, %rdx		# Increment i
	cmpq	%rdx, %r12		# Compare limit:i
	jg	.L168			# If >, goto \textbf{loop}
/* $end fpb-combine7-s 1329 */
.L167:
	cmpq	%rdx, %rbp
	jle	.L169
	leaq	(%rax,%rdx,4), %rax
.L170:
	mulss	(%rax), %xmm1
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L170
.L169:
	movss	%xmm1, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll8x8_combine:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	movq	%rdi, %rbx
	movq	%rsi, %rbp
	call	vec_length
	movq	%rax, %r12
	movq	%rbx, %rdi
	call	get_vec_start
	movq	%rax, %rdx
	leaq	-28(%rax,%r12,4), %rcx
	cmpq	%rcx, %rax
	jb	.L175
	movss	.LC2(%rip), %xmm1
	movaps	%xmm1, %xmm7
	movaps	%xmm1, %xmm6
	movaps	%xmm1, %xmm5
	movaps	%xmm1, %xmm2
	movaps	%xmm1, %xmm4
	movaps	%xmm1, %xmm3
	jmp	.L176
.L175:
	movss	.LC2(%rip), %xmm1
	movaps	%xmm1, %xmm6
	movaps	%xmm1, %xmm5
	movaps	%xmm1, %xmm2
	movaps	%xmm1, %xmm4
	movaps	%xmm1, %xmm3
.L177:
	mulss	(%rax), %xmm2
	mulss	4(%rax), %xmm4
	mulss	8(%rax), %xmm3
	mulss	12(%rax), %xmm5
	mulss	16(%rax), %xmm1
	movss	20(%rax), %xmm0
	movaps	%xmm0, %xmm7
	mulss	24(%rax), %xmm7
	mulss	28(%rax), %xmm6
	addq	$32, %rax
	cmpq	%rax, %rcx
	ja	.L177
	movq	%rdx, %rax
	notq	%rax
	leaq	(%rax,%rcx), %rax
	andq	$-32, %rax
	leaq	32(%rdx,%rax), %rdx
.L176:
	leaq	28(%rcx), %rax
	cmpq	%rdx, %rax
	jbe	.L178
.L181:
	mulss	(%rdx), %xmm2
	addq	$4, %rdx
	cmpq	%rdx, %rax
	ja	.L181
.L178:
	movaps	%xmm2, %xmm0
	mulss	%xmm4, %xmm0
	mulss	%xmm3, %xmm0
	mulss	%xmm5, %xmm0
	mulss	%xmm1, %xmm0
	mulss	%xmm7, %xmm0
	mulss	%xmm6, %xmm0
	movss	%xmm0, (%rbp)
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

unroll8x4_combine:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	movq	%rdi, %rbx
	movq	%rsi, %rbp
	call	vec_length
	movq	%rax, %r12
	movq	%rbx, %rdi
	call	get_vec_start
	movq	%rax, %rdx
	leaq	-28(%rax,%r12,4), %rcx
	cmpq	%rcx, %rax
	jb	.L185
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm1
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm3
	jmp	.L186
.L185:
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm1
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm3
.L187:
	mulss	(%rax), %xmm0
	mulss	4(%rax), %xmm1
	mulss	8(%rax), %xmm2
	mulss	12(%rax), %xmm3
	mulss	16(%rax), %xmm0
	mulss	20(%rax), %xmm1
	mulss	24(%rax), %xmm2
	mulss	28(%rax), %xmm3
	addq	$32, %rax
	cmpq	%rax, %rcx
	ja	.L187
	movq	%rdx, %rax
	notq	%rax
	leaq	(%rax,%rcx), %rax
	andq	$-32, %rax
	leaq	32(%rdx,%rax), %rdx
.L186:
	leaq	28(%rcx), %rax
	cmpq	%rdx, %rax
	jbe	.L188
.L191:
	mulss	(%rdx), %xmm0
	addq	$4, %rdx
	cmpq	%rdx, %rax
	ja	.L191
.L188:
	mulss	%xmm1, %xmm0
	mulss	%xmm2, %xmm0
	mulss	%xmm3, %xmm0
	movss	%xmm0, (%rbp)
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

unroll9x3_combine:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	movq	%rdi, %rbx
	movq	%rsi, %rbp
	call	vec_length
	movq	%rax, %r12
	movq	%rbx, %rdi
	call	get_vec_start
	movq	%rax, %rcx
	leaq	-32(%rax,%r12,4), %rsi
	cmpq	%rsi, %rax
	jb	.L195
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm1
	movaps	%xmm0, %xmm2
	jmp	.L196
.L195:
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm1
	movaps	%xmm0, %xmm2
.L197:
	mulss	(%rax), %xmm0
	mulss	4(%rax), %xmm1
	mulss	8(%rax), %xmm2
	mulss	12(%rax), %xmm0
	mulss	16(%rax), %xmm1
	mulss	20(%rax), %xmm2
	mulss	24(%rax), %xmm0
	mulss	28(%rax), %xmm1
	mulss	32(%rax), %xmm2
	addq	$36, %rax
	cmpq	%rax, %rsi
	ja	.L197
	movq	%rcx, %rdx
	notq	%rdx
	leaq	(%rdx,%rsi), %rdx
	movabsq	$-2049638230412172401, %rax
	mulq	%rdx
	shrq	$5, %rdx
	leaq	9(%rdx,%rdx,8), %rdx
	leaq	(%rcx,%rdx,4), %rcx
.L196:
	leaq	32(%rsi), %rax
	cmpq	%rcx, %rax
	jbe	.L198
.L201:
	mulss	(%rcx), %xmm0
	addq	$4, %rcx
	cmpq	%rcx, %rax
	ja	.L201
.L198:
	mulss	%xmm1, %xmm0
	mulss	%xmm2, %xmm0
	movss	%xmm0, (%rbp)
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

unroll8x2_combine:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	movq	%rdi, %rbx
	movq	%rsi, %rbp
	call	vec_length
	movq	%rax, %r12
	movq	%rbx, %rdi
	call	get_vec_start
	movq	%rax, %rdx
	leaq	-28(%rax,%r12,4), %rcx
	cmpq	%rcx, %rax
	jb	.L205
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm1
	jmp	.L206
.L205:
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm1
.L207:
	mulss	(%rax), %xmm0
	mulss	4(%rax), %xmm1
	mulss	8(%rax), %xmm0
	mulss	12(%rax), %xmm1
	mulss	16(%rax), %xmm0
	mulss	20(%rax), %xmm1
	mulss	24(%rax), %xmm0
	mulss	28(%rax), %xmm1
	addq	$32, %rax
	cmpq	%rax, %rcx
	ja	.L207
	movq	%rdx, %rax
	notq	%rax
	leaq	(%rax,%rcx), %rax
	andq	$-32, %rax
	leaq	32(%rdx,%rax), %rdx
.L206:
	leaq	28(%rcx), %rax
	cmpq	%rdx, %rax
	jbe	.L208
.L211:
	mulss	(%rdx), %xmm0
	addq	$4, %rdx
	cmpq	%rdx, %rax
	ja	.L211
.L208:
	mulss	%xmm1, %xmm0
	movss	%xmm0, (%rbp)
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

unroll4x2as_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %r12
	shrq	$63, %rax
	addq	%r12, %rax
	movq	%rax, %rbp
	sarq	%rbp
	movq	%rbx, %rdi
	call	get_vec_start
	leaq	(%rax,%rbp,4), %rcx
	testq	%rbp, %rbp
	jg	.L215
	movss	.LC2(%rip), %xmm1
	movaps	%xmm1, %xmm0
	jmp	.L216
.L215:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm1
	movaps	%xmm1, %xmm0
.L217:
	mulss	(%rax,%rdx,4), %xmm1
	mulss	(%rcx,%rdx,4), %xmm0
	addq	$1, %rdx
	cmpq	%rdx, %rbp
	jg	.L217
.L216:
	leaq	(%rbp,%rbp), %rdx
	cmpq	%rdx, %r12
	jle	.L218
	leaq	(%rax,%rdx,4), %rax
.L219:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %r12
	jg	.L219
.L218:
	mulss	%xmm1, %xmm0
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unrollx2as_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %r12
	shrq	$63, %rax
	addq	%r12, %rax
	movq	%rax, %rbp
	sarq	%rbp
	movq	%rbx, %rdi
	call	get_vec_start
	leaq	(%rax,%rbp,4), %rcx
	testq	%rbp, %rbp
	jg	.L224
	movss	.LC2(%rip), %xmm1
	movaps	%xmm1, %xmm0
	jmp	.L225
.L224:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm1
	movaps	%xmm1, %xmm0
.L226:
	mulss	(%rax,%rdx,4), %xmm1
	mulss	(%rcx,%rdx,4), %xmm0
	addq	$1, %rdx
	cmpq	%rdx, %rbp
	jg	.L226
.L225:
	leaq	(%rbp,%rbp), %rdx
	cmpq	%rdx, %r12
	jle	.L227
	leaq	(%rax,%rdx,4), %rax
.L228:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %r12
	jg	.L228
.L227:
	mulss	%xmm1, %xmm0
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll10x10a_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-9(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L233
	movl	$0, %ecx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm9
	movaps	%xmm0, %xmm8
	movaps	%xmm0, %xmm7
	movaps	%xmm0, %xmm6
	movaps	%xmm0, %xmm5
	movaps	%xmm0, %xmm4
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm1
	jmp	.L234
.L233:
	movq	%rax, %rdx
	movl	$0, %ecx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm9
	movaps	%xmm0, %xmm8
	movaps	%xmm0, %xmm7
	movaps	%xmm0, %xmm6
	movaps	%xmm0, %xmm5
	movaps	%xmm0, %xmm4
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm1
.L235:
	mulss	(%rdx), %xmm0
	mulss	4(%rdx), %xmm9
	mulss	8(%rdx), %xmm8
	mulss	12(%rdx), %xmm7
	mulss	16(%rdx), %xmm6
	mulss	20(%rdx), %xmm5
	mulss	24(%rdx), %xmm4
	mulss	28(%rdx), %xmm3
	mulss	32(%rdx), %xmm2
	mulss	36(%rdx), %xmm1
	addq	$10, %rcx
	addq	$40, %rdx
	cmpq	%rcx, %r12
	jg	.L235
.L234:
	cmpq	%rcx, %rbp
	jle	.L236
	leaq	(%rax,%rcx,4), %rax
.L237:
	mulss	(%rax), %xmm0
	addq	$1, %rcx
	addq	$4, %rax
	cmpq	%rcx, %rbp
	jg	.L237
.L236:
	mulss	%xmm9, %xmm0
	mulss	%xmm8, %xmm0
	mulss	%xmm7, %xmm0
	mulss	%xmm6, %xmm0
	mulss	%xmm5, %xmm0
	mulss	%xmm4, %xmm0
	mulss	%xmm3, %xmm0
	mulss	%xmm2, %xmm0
	mulss	%xmm1, %xmm0
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll8x8a_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-7(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L242
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm7
	movaps	%xmm0, %xmm6
	movaps	%xmm0, %xmm5
	movaps	%xmm0, %xmm4
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm1
	jmp	.L243
.L242:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm7
	movaps	%xmm0, %xmm6
	movaps	%xmm0, %xmm5
	movaps	%xmm0, %xmm4
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm1
.L244:
	mulss	(%rax,%rdx,4), %xmm0
	mulss	4(%rax,%rdx,4), %xmm7
	mulss	8(%rax,%rdx,4), %xmm6
	mulss	12(%rax,%rdx,4), %xmm5
	mulss	16(%rax,%rdx,4), %xmm4
	mulss	20(%rax,%rdx,4), %xmm3
	mulss	24(%rax,%rdx,4), %xmm2
	mulss	28(%rax,%rdx,4), %xmm1
	addq	$8, %rdx
	cmpq	%rdx, %r12
	jg	.L244
.L243:
	cmpq	%rdx, %rbp
	jle	.L245
	leaq	(%rax,%rdx,4), %rax
.L246:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L246
.L245:
	mulss	%xmm7, %xmm0
	mulss	%xmm6, %xmm0
	mulss	%xmm5, %xmm0
	mulss	%xmm4, %xmm0
	mulss	%xmm3, %xmm0
	mulss	%xmm2, %xmm0
	mulss	%xmm1, %xmm0
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll6x6a_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-5(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L251
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm5
	movaps	%xmm0, %xmm4
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm1
	jmp	.L252
.L251:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm5
	movaps	%xmm0, %xmm4
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm1
.L253:
	mulss	(%rax,%rdx,4), %xmm0
	mulss	4(%rax,%rdx,4), %xmm5
	mulss	8(%rax,%rdx,4), %xmm4
	mulss	12(%rax,%rdx,4), %xmm3
	mulss	16(%rax,%rdx,4), %xmm2
	mulss	20(%rax,%rdx,4), %xmm1
	addq	$6, %rdx
	cmpq	%rdx, %r12
	jg	.L253
.L252:
	cmpq	%rdx, %rbp
	jle	.L254
	leaq	(%rax,%rdx,4), %rax
.L255:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L255
.L254:
	mulss	%xmm5, %xmm0
	mulss	%xmm4, %xmm0
	mulss	%xmm3, %xmm0
	mulss	%xmm2, %xmm0
	mulss	%xmm1, %xmm0
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll5x5a_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-4(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L260
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm4
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm1
	jmp	.L261
.L260:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm4
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm1
.L262:
	mulss	(%rax,%rdx,4), %xmm0
	mulss	4(%rax,%rdx,4), %xmm4
	mulss	8(%rax,%rdx,4), %xmm3
	mulss	12(%rax,%rdx,4), %xmm2
	mulss	16(%rax,%rdx,4), %xmm1
	addq	$5, %rdx
	cmpq	%rdx, %r12
	jg	.L262
.L261:
	cmpq	%rdx, %rbp
	jle	.L263
	leaq	(%rax,%rdx,4), %rax
.L264:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L264
.L263:
	mulss	%xmm4, %xmm0
	mulss	%xmm3, %xmm0
	mulss	%xmm2, %xmm0
	mulss	%xmm1, %xmm0
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll12x12a_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-11(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L269
	movl	$0, %ecx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm11
	movaps	%xmm0, %xmm10
	movaps	%xmm0, %xmm1
	movaps	%xmm0, %xmm9
	movaps	%xmm0, %xmm8
	movaps	%xmm0, %xmm7
	movaps	%xmm0, %xmm6
	movaps	%xmm0, %xmm5
	movaps	%xmm0, %xmm4
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
	jmp	.L270
.L269:
	movq	%rax, %rdx
	movl	$0, %ecx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm11
	movaps	%xmm0, %xmm10
	movaps	%xmm0, %xmm1
	movaps	%xmm0, %xmm9
	movaps	%xmm0, %xmm8
	movaps	%xmm0, %xmm7
	movaps	%xmm0, %xmm6
	movaps	%xmm0, %xmm5
	movaps	%xmm0, %xmm4
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
.L271:
	mulss	(%rdx), %xmm0
	mulss	24(%rdx), %xmm7
	mulss	4(%rdx), %xmm11
	mulss	28(%rdx), %xmm6
	mulss	8(%rdx), %xmm10
	mulss	32(%rdx), %xmm5
	mulss	12(%rdx), %xmm1
	mulss	36(%rdx), %xmm4
	mulss	16(%rdx), %xmm9
	mulss	40(%rdx), %xmm3
	mulss	20(%rdx), %xmm8
	mulss	44(%rdx), %xmm2
	addq	$12, %rcx
	addq	$48, %rdx
	cmpq	%rcx, %r12
	jg	.L271
.L270:
	cmpq	%rcx, %rbp
	jle	.L272
	leaq	(%rax,%rcx,4), %rax
.L273:
	mulss	(%rax), %xmm0
	addq	$1, %rcx
	addq	$4, %rax
	cmpq	%rcx, %rbp
	jg	.L273
.L272:
	mulss	%xmm11, %xmm0
	mulss	%xmm10, %xmm1
	mulss	%xmm1, %xmm0
	movaps	%xmm9, %xmm1
	mulss	%xmm8, %xmm1
	mulss	%xmm1, %xmm0
	movaps	%xmm7, %xmm1
	mulss	%xmm6, %xmm1
	mulss	%xmm1, %xmm0
	movaps	%xmm5, %xmm1
	mulss	%xmm4, %xmm1
	mulss	%xmm1, %xmm0
	movaps	%xmm3, %xmm1
	mulss	%xmm2, %xmm1
	mulss	%xmm1, %xmm0
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll12x6a_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-11(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L278
	movl	$0, %ecx
	movss	.LC2(%rip), %xmm2
	movaps	%xmm2, %xmm6
	movaps	%xmm2, %xmm5
	movaps	%xmm2, %xmm1
	movaps	%xmm2, %xmm4
	movaps	%xmm2, %xmm3
	jmp	.L279
.L278:
	movq	%rax, %rdx
	movl	$0, %ecx
	movss	.LC2(%rip), %xmm2
	movaps	%xmm2, %xmm6
	movaps	%xmm2, %xmm5
	movaps	%xmm2, %xmm1
	movaps	%xmm2, %xmm4
	movaps	%xmm2, %xmm3
.L280:
	movaps	%xmm2, %xmm0
	mulss	(%rdx), %xmm0
	movaps	%xmm0, %xmm2
	mulss	24(%rdx), %xmm2
	movaps	%xmm6, %xmm0
	mulss	4(%rdx), %xmm0
	movaps	%xmm0, %xmm6
	mulss	28(%rdx), %xmm6
	movaps	%xmm5, %xmm0
	mulss	8(%rdx), %xmm0
	movaps	%xmm0, %xmm5
	mulss	32(%rdx), %xmm5
	movaps	%xmm1, %xmm0
	mulss	12(%rdx), %xmm0
	movaps	%xmm0, %xmm1
	mulss	36(%rdx), %xmm1
	movaps	%xmm4, %xmm0
	mulss	16(%rdx), %xmm0
	movaps	%xmm0, %xmm4
	mulss	40(%rdx), %xmm4
	movaps	%xmm3, %xmm0
	mulss	20(%rdx), %xmm0
	movaps	%xmm0, %xmm3
	mulss	44(%rdx), %xmm3
	addq	$12, %rcx
	addq	$48, %rdx
	cmpq	%rcx, %r12
	jg	.L280
.L279:
	cmpq	%rcx, %rbp
	jle	.L281
	leaq	(%rax,%rcx,4), %rax
.L282:
	mulss	(%rax), %xmm2
	addq	$1, %rcx
	addq	$4, %rax
	cmpq	%rcx, %rbp
	jg	.L282
.L281:
	movaps	%xmm2, %xmm0
	mulss	%xmm6, %xmm0
	mulss	%xmm5, %xmm1
	mulss	%xmm1, %xmm0
	movaps	%xmm4, %xmm1
	mulss	%xmm3, %xmm1
	mulss	%xmm1, %xmm0
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll8x4a_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-7(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L287
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm1
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm3
	jmp	.L288
.L287:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm1
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm3
.L289:
	mulss	(%rax,%rdx,4), %xmm0
	mulss	4(%rax,%rdx,4), %xmm1
	mulss	8(%rax,%rdx,4), %xmm2
	mulss	12(%rax,%rdx,4), %xmm3
	mulss	16(%rax,%rdx,4), %xmm0
	mulss	20(%rax,%rdx,4), %xmm1
	mulss	24(%rax,%rdx,4), %xmm2
	mulss	28(%rax,%rdx,4), %xmm3
	addq	$8, %rdx
	cmpq	%rdx, %r12
	jg	.L289
.L288:
	cmpq	%rdx, %rbp
	jle	.L290
	leaq	(%rax,%rdx,4), %rax
.L291:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L291
.L290:
	mulss	%xmm1, %xmm0
	mulss	%xmm2, %xmm0
	mulss	%xmm3, %xmm0
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll4x4a_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-3(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L296
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm1
	jmp	.L297
.L296:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm3
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm1
.L298:
	mulss	(%rax,%rdx,4), %xmm0
	mulss	4(%rax,%rdx,4), %xmm3
	mulss	8(%rax,%rdx,4), %xmm2
	mulss	12(%rax,%rdx,4), %xmm1
	addq	$4, %rdx
	cmpq	%rdx, %r12
	jg	.L298
.L297:
	cmpq	%rdx, %rbp
	jle	.L299
	leaq	(%rax,%rdx,4), %rax
.L300:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L300
.L299:
	mulss	%xmm3, %xmm0
	mulss	%xmm2, %xmm0
	mulss	%xmm1, %xmm0
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll3x3a_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-2(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L305
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm1
	jmp	.L306
.L305:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm2
	movaps	%xmm0, %xmm1
.L307:
	mulss	(%rax,%rdx,4), %xmm0
	mulss	4(%rax,%rdx,4), %xmm2
	mulss	8(%rax,%rdx,4), %xmm1
	addq	$3, %rdx
	cmpq	%rdx, %r12
	jg	.L307
.L306:
	cmpq	%rdx, %rbp
	jle	.L308
	leaq	(%rax,%rdx,4), %rax
.L309:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L309
.L308:
	mulss	%xmm2, %xmm0
	mulss	%xmm1, %xmm0
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll8x2a_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-7(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L314
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm1
	jmp	.L315
.L314:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm1
.L316:
	mulss	(%rax,%rdx,4), %xmm0
	mulss	4(%rax,%rdx,4), %xmm1
	mulss	8(%rax,%rdx,4), %xmm0
	mulss	12(%rax,%rdx,4), %xmm1
	mulss	16(%rax,%rdx,4), %xmm0
	mulss	20(%rax,%rdx,4), %xmm1
	mulss	24(%rax,%rdx,4), %xmm0
	mulss	28(%rax,%rdx,4), %xmm1
	addq	$8, %rdx
	cmpq	%rdx, %r12
	jg	.L316
.L315:
	cmpq	%rdx, %rbp
	jle	.L317
	leaq	(%rax,%rdx,4), %rax
.L318:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L318
.L317:
	mulss	%xmm1, %xmm0
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll4x2a_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-3(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L323
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm1
	jmp	.L324
.L323:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm1
.L325:
	mulss	(%rax,%rdx,4), %xmm0
	mulss	4(%rax,%rdx,4), %xmm1
	mulss	8(%rax,%rdx,4), %xmm0
	mulss	12(%rax,%rdx,4), %xmm1
	addq	$4, %rdx
	cmpq	%rdx, %r12
	jg	.L325
.L324:
	cmpq	%rdx, %rbp
	jle	.L326
	leaq	(%rax,%rdx,4), %rax
.L327:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L327
.L326:
	mulss	%xmm1, %xmm0
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

combine6:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-1(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L332
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm1
	jmp	.L333
.L332:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	movaps	%xmm0, %xmm1
/* $begin fpb-combine6-s 2470 */
# combine6: data_t = float, OP = *
# i in \rdxreg, data in \raxreg, limit in \rxiireg, acc0 in %xmm0, acc1 in %xmm1
.L334:				      # \textbf{loop:}
	mulss	(%rax,%rdx,4), %xmm0	# Multiply x0 by data[i]
	mulss	4(%rax,%rdx,4), %xmm1	# Multiply x1 by data[i+1]
	addq	$2, %rdx		# Increment i
	cmpq	%rdx, %r12		# Compare limit:i
	jg	.L334			# If >, goto \textbf{loop}
/* $end fpb-combine6-s 2470 */
.L333:
	cmpq	%rdx, %rbp
	jle	.L335
	leaq	(%rax,%rdx,4), %rax
.L336:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L336
.L335:
	mulss	%xmm1, %xmm0
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll16_combine:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	movq	%rdi, %r12
	movq	%rsi, %rbp
	call	vec_length
	movq	%rax, %rbx
	movq	%r12, %rdi
	call	get_vec_start
	movq	%rax, %rcx
	movq	%rbx, %rdx
	sarq	$63, %rdx
	shrq	$60, %rdx
	leaq	(%rbx,%rdx), %rax
	andl	$15, %eax
	movq	%rax, %rsi
	subq	%rdx, %rsi
	subq	%rsi, %rbx
	leaq	(%rcx,%rbx,4), %rdx
	cmpq	%rdx, %rcx
	jb	.L341
	movss	.LC2(%rip), %xmm0
	jmp	.L342
.L341:
	movq	%rcx, %rax
	movss	.LC2(%rip), %xmm0
.L343:
	mulss	(%rax), %xmm0
	mulss	4(%rax), %xmm0
	mulss	8(%rax), %xmm0
	mulss	12(%rax), %xmm0
	mulss	16(%rax), %xmm0
	mulss	20(%rax), %xmm0
	mulss	24(%rax), %xmm0
	mulss	28(%rax), %xmm0
	mulss	32(%rax), %xmm0
	mulss	36(%rax), %xmm0
	mulss	40(%rax), %xmm0
	mulss	44(%rax), %xmm0
	mulss	48(%rax), %xmm0
	mulss	52(%rax), %xmm0
	mulss	56(%rax), %xmm0
	mulss	60(%rax), %xmm0
	addq	$64, %rax
	cmpq	%rax, %rdx
	ja	.L343
	movq	%rcx, %rax
	notq	%rax
	leaq	(%rax,%rdx), %rax
	andq	$-64, %rax
	leaq	64(%rcx,%rax), %rcx
.L342:
	leaq	(%rdx,%rsi,4), %rax
	cmpq	%rcx, %rax
	jbe	.L344
.L347:
	mulss	(%rcx), %xmm0
	addq	$4, %rcx
	cmpq	%rcx, %rax
	ja	.L347
.L344:
	movss	%xmm0, (%rbp)
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

unroll8_combine:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	movq	%rdi, %r12
	movq	%rsi, %rbp
	call	vec_length
	movq	%rax, %rbx
	movq	%r12, %rdi
	call	get_vec_start
	movq	%rax, %rcx
	movq	%rbx, %rdx
	sarq	$63, %rdx
	shrq	$61, %rdx
	leaq	(%rbx,%rdx), %rax
	andl	$7, %eax
	movq	%rax, %rsi
	subq	%rdx, %rsi
	subq	%rsi, %rbx
	leaq	(%rcx,%rbx,4), %rdx
	cmpq	%rdx, %rcx
	jb	.L351
	movss	.LC2(%rip), %xmm0
	jmp	.L352
.L351:
	movq	%rcx, %rax
	movss	.LC2(%rip), %xmm0
.L353:
	mulss	(%rax), %xmm0
	mulss	4(%rax), %xmm0
	mulss	8(%rax), %xmm0
	mulss	12(%rax), %xmm0
	mulss	16(%rax), %xmm0
	mulss	20(%rax), %xmm0
	mulss	24(%rax), %xmm0
	mulss	28(%rax), %xmm0
	addq	$32, %rax
	cmpq	%rax, %rdx
	ja	.L353
	movq	%rcx, %rax
	notq	%rax
	leaq	(%rax,%rdx), %rax
	andq	$-32, %rax
	leaq	32(%rcx,%rax), %rcx
.L352:
	leaq	(%rdx,%rsi,4), %rax
	cmpq	%rcx, %rax
	jbe	.L354
.L357:
	mulss	(%rcx), %xmm0
	addq	$4, %rcx
	cmpq	%rcx, %rax
	ja	.L357
.L354:
	movss	%xmm0, (%rbp)
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

unroll4_combine:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	movq	%rdi, %rbx
	movq	%rsi, %rbp
	call	vec_length
	movq	%rax, %r12
	movq	%rbx, %rdi
	call	get_vec_start
	movq	%rax, %rdx
	leaq	-12(%rax,%r12,4), %rcx
	cmpq	%rcx, %rax
	jb	.L361
	movss	.LC2(%rip), %xmm0
	jmp	.L362
.L361:
	movss	.LC2(%rip), %xmm0
.L363:
	mulss	(%rax), %xmm0
	mulss	4(%rax), %xmm0
	mulss	8(%rax), %xmm0
	mulss	12(%rax), %xmm0
	addq	$16, %rax
	cmpq	%rax, %rcx
	ja	.L363
	movq	%rdx, %rax
	notq	%rax
	leaq	(%rax,%rcx), %rax
	andq	$-16, %rax
	leaq	16(%rdx,%rax), %rdx
.L362:
	leaq	12(%rcx), %rax
	cmpq	%rdx, %rax
	jbe	.L364
.L367:
	mulss	(%rdx), %xmm0
	addq	$4, %rdx
	cmpq	%rdx, %rax
	ja	.L367
.L364:
	movss	%xmm0, (%rbp)
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

unroll3_combine:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	movq	%rdi, %rbx
	movq	%rsi, %rbp
	call	vec_length
	movq	%rax, %r12
	movq	%rbx, %rdi
	call	get_vec_start
	movq	%rax, %rcx
	leaq	-8(%rax,%r12,4), %rsi
	cmpq	%rsi, %rax
	jb	.L371
	movss	.LC2(%rip), %xmm0
	jmp	.L372
.L371:
	movss	.LC2(%rip), %xmm0
.L373:
	mulss	(%rax), %xmm0
	mulss	4(%rax), %xmm0
	mulss	8(%rax), %xmm0
	addq	$12, %rax
	cmpq	%rax, %rsi
	ja	.L373
	movq	%rcx, %rdx
	notq	%rdx
	leaq	(%rdx,%rsi), %rdx
	movabsq	$-6148914691236517205, %rax
	mulq	%rdx
	shrq	$3, %rdx
	leaq	3(%rdx,%rdx,2), %rdx
	leaq	(%rcx,%rdx,4), %rcx
.L372:
	leaq	8(%rsi), %rax
	cmpq	%rcx, %rax
	jbe	.L374
.L377:
	mulss	(%rcx), %xmm0
	addq	$4, %rcx
	cmpq	%rcx, %rax
	ja	.L377
.L374:
	movss	%xmm0, (%rbp)
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

unroll2_combine:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	movq	%rdi, %r12
	movq	%rsi, %rbp
	call	vec_length
	movq	%rax, %rbx
	movq	%r12, %rdi
	call	get_vec_start
	movq	%rax, %rcx
	movq	%rbx, %rdx
	shrq	$63, %rdx
	leaq	(%rbx,%rdx), %rax
	andl	$1, %eax
	movq	%rax, %rsi
	subq	%rdx, %rsi
	subq	%rsi, %rbx
	leaq	(%rcx,%rbx,4), %rdx
	cmpq	%rdx, %rcx
	jb	.L381
	movss	.LC2(%rip), %xmm0
	jmp	.L382
.L381:
	movq	%rcx, %rax
	movss	.LC2(%rip), %xmm0
.L383:
	mulss	(%rax), %xmm0
	mulss	4(%rax), %xmm0
	addq	$8, %rax
	cmpq	%rax, %rdx
	ja	.L383
	movq	%rcx, %rax
	notq	%rax
	leaq	(%rax,%rdx), %rax
	shrq	$3, %rax
	leaq	8(%rcx,%rax,8), %rcx
.L382:
	leaq	(%rdx,%rsi,4), %rax
	cmpq	%rcx, %rax
	jbe	.L384
.L387:
	mulss	(%rcx), %xmm0
	addq	$4, %rcx
	cmpq	%rcx, %rax
	ja	.L387
.L384:
	movss	%xmm0, (%rbp)
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

unroll16a_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-15(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L391
	movl	$0, %ecx
	movss	.LC2(%rip), %xmm0
	jmp	.L392
.L391:
	movq	%rax, %rdx
	movl	$0, %ecx
	movss	.LC2(%rip), %xmm0
.L393:
	mulss	(%rdx), %xmm0
	mulss	4(%rdx), %xmm0
	mulss	8(%rdx), %xmm0
	mulss	12(%rdx), %xmm0
	mulss	16(%rdx), %xmm0
	mulss	20(%rdx), %xmm0
	mulss	24(%rdx), %xmm0
	mulss	28(%rdx), %xmm0
	mulss	32(%rdx), %xmm0
	mulss	36(%rdx), %xmm0
	mulss	40(%rdx), %xmm0
	mulss	44(%rdx), %xmm0
	mulss	48(%rdx), %xmm0
	mulss	52(%rdx), %xmm0
	mulss	56(%rdx), %xmm0
	mulss	60(%rdx), %xmm0
	addq	$16, %rcx
	addq	$64, %rdx
	cmpq	%rcx, %r12
	jg	.L393
.L392:
	cmpq	%rcx, %rbp
	jle	.L394
	leaq	(%rax,%rcx,4), %rax
.L395:
	mulss	(%rax), %xmm0
	addq	$1, %rcx
	addq	$4, %rax
	cmpq	%rcx, %rbp
	jg	.L395
.L394:
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll8a_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-7(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L400
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	jmp	.L401
.L400:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
.L402:
	mulss	(%rax,%rdx,4), %xmm0
	mulss	4(%rax,%rdx,4), %xmm0
	mulss	8(%rax,%rdx,4), %xmm0
	mulss	12(%rax,%rdx,4), %xmm0
	mulss	16(%rax,%rdx,4), %xmm0
	mulss	20(%rax,%rdx,4), %xmm0
	mulss	24(%rax,%rdx,4), %xmm0
	mulss	28(%rax,%rdx,4), %xmm0
	addq	$8, %rdx
	cmpq	%rdx, %r12
	jg	.L402
.L401:
	cmpq	%rdx, %rbp
	jle	.L403
	leaq	(%rax,%rdx,4), %rax
.L404:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L404
.L403:
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll6a_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-5(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L409
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	jmp	.L410
.L409:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
.L411:
	mulss	(%rax,%rdx,4), %xmm0
	mulss	4(%rax,%rdx,4), %xmm0
	mulss	8(%rax,%rdx,4), %xmm0
	mulss	12(%rax,%rdx,4), %xmm0
	mulss	16(%rax,%rdx,4), %xmm0
	mulss	20(%rax,%rdx,4), %xmm0
	addq	$6, %rdx
	cmpq	%rdx, %r12
	jg	.L411
.L410:
	cmpq	%rdx, %rbp
	jle	.L412
	leaq	(%rax,%rdx,4), %rax
.L413:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L413
.L412:
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll5a_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-4(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L418
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	jmp	.L419
.L418:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
.L420:
	mulss	(%rax,%rdx,4), %xmm0
	mulss	4(%rax,%rdx,4), %xmm0
	mulss	8(%rax,%rdx,4), %xmm0
	mulss	12(%rax,%rdx,4), %xmm0
	mulss	16(%rax,%rdx,4), %xmm0
	addq	$5, %rdx
	cmpq	%rdx, %r12
	jg	.L420
.L419:
	cmpq	%rdx, %rbp
	jle	.L421
	leaq	(%rax,%rdx,4), %rax
.L422:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L422
.L421:
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll4a_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-3(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L427
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	jmp	.L428
.L427:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
.L429:
	mulss	(%rax,%rdx,4), %xmm0
	mulss	4(%rax,%rdx,4), %xmm0
	mulss	8(%rax,%rdx,4), %xmm0
	mulss	12(%rax,%rdx,4), %xmm0
	addq	$4, %rdx
	cmpq	%rdx, %r12
	jg	.L429
.L428:
	cmpq	%rdx, %rbp
	jle	.L430
	leaq	(%rax,%rdx,4), %rax
.L431:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L431
.L430:
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

unroll2aw_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-1(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L436
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	jmp	.L437
.L436:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
.L438:
	mulss	(%rax,%rdx,4), %xmm0
	addq	$2, %rdx
	mulss	-4(%rax,%rdx,4), %xmm0
	cmpq	%rdx, %r12
	jg	.L438
.L437:
	cmpq	%rdx, %rbp
	jle	.L439
	leaq	(%rax,%rdx,4), %rax
.L440:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L440
.L439:
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

combine5p:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	movq	%rdi, %rbx
	movq	%rsi, %r12
	call	get_vec_start
	movq	%rax, %rbp
	movq	%rbx, %rdi
	call	vec_length
	leaq	(%rbp,%rax,4), %rdx
	leaq	-4(%rdx), %rcx
	cmpq	%rcx, %rbp
	jb	.L445
	movss	.LC2(%rip), %xmm0
	jmp	.L446
.L445:
	movq	%rbp, %rax
	movss	.LC2(%rip), %xmm0
.L447:
	mulss	(%rax), %xmm0
	mulss	4(%rax), %xmm0
	addq	$8, %rax
	cmpq	%rax, %rcx
	ja	.L447
	movq	%rdx, %rax
	subq	%rbp, %rax
	subq	$5, %rax
	shrq	$3, %rax
	leaq	8(%rbp,%rax,8), %rbp
.L446:
	cmpq	%rbp, %rdx
	jbe	.L448
.L451:
	mulss	(%rbp), %xmm0
	addq	$4, %rbp
	cmpq	%rbp, %rdx
	ja	.L451
.L448:
	movss	%xmm0, (%r12)
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

unroll3a_combine:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-2(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L455
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	jmp	.L456
.L455:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
.L457:
	mulss	(%rax,%rdx,4), %xmm0
	mulss	4(%rax,%rdx,4), %xmm0
	mulss	8(%rax,%rdx,4), %xmm0
	addq	$3, %rdx
	cmpq	%rdx, %r12
	jg	.L457
.L456:
	cmpq	%rdx, %rbp
	jle	.L458
	leaq	(%rax,%rdx,4), %rax
.L459:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L459
.L458:
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

combine5:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %r13
	call	vec_length
	movq	%rax, %rbp
	leaq	-1(%rax), %r12
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%r12, %r12
	jg	.L464
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
	jmp	.L465
.L464:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
/* $begin fpb-combine5-s 3193 */
# combine5: data_t = float, OP = *
# i in \rdxreg, data in \raxreg, limit in \rxiireg, acc in %xmm0
.L466:				      # \textbf{loop:}
	mulss	(%rax,%rdx,4), %xmm0	# Multiply acc by data[i]
	mulss	4(%rax,%rdx,4), %xmm0	# Multiply acc by data[i+1]
	addq	$2, %rdx		# Increment i
	cmpq	%rdx, %r12		# Compare limit:i
	jg	.L466			# If >, goto \textbf{loop}
/* $end fpb-combine5-s 3193 */
.L465:
	cmpq	%rdx, %rbp
	jle	.L467
	leaq	(%rax,%rdx,4), %rax
.L468:
	mulss	(%rax), %xmm0
	addq	$1, %rdx
	addq	$4, %rax
	cmpq	%rdx, %rbp
	jg	.L468
.L467:
	movss	%xmm0, (%r13)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

combine4p:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	movq	%rdi, %rbx
	movq	%rsi, %rbp
	call	vec_length
	movq	%rax, %r12
	movq	%rbx, %rdi
	call	get_vec_start
	leaq	(%rax,%r12,4), %rdx
	cmpq	%rdx, %rax
	jb	.L473
	movss	.LC2(%rip), %xmm0
	jmp	.L474
.L473:
	movss	.LC2(%rip), %xmm0
.L475:
	mulss	(%rax), %xmm0
	addq	$4, %rax
	cmpq	%rax, %rdx
	ja	.L475
.L474:
	movss	%xmm0, (%rbp)
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

combine4b:
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	%rdi, %rbx
	movq	%rsi, %rbp
	call	vec_length
	movq	%rax, %rcx
	testq	%rax, %rax
	jg	.L479
	movss	.LC2(%rip), %xmm0
	jmp	.L480
.L479:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
.L482:
	testq	%rdx, %rdx
	js	.L481
	cmpq	%rdx, (%rbx)
	jle	.L481
	movq	8(%rbx), %rax
	mulss	(%rax,%rdx,4), %xmm0
.L481:
	addq	$1, %rdx
	cmpq	%rdx, %rcx
	jg	.L482
.L480:
	movss	%xmm0, (%rbp)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	ret

combine4:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	movq	%rdi, %rbx
	movq	%rsi, %r12
	call	vec_length
	movq	%rax, %rbp
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%rbp, %rbp
	jg	.L486
	movss	.LC2(%rip), %xmm0
	jmp	.L487
.L486:
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
/* $begin fpb-combine4-s 3297 */
# combine4: data_t = float, OP = *
# i in \rdxreg, data in \raxreg, limit in \rbpreg, acc in %xmm0
.L488:				      # \textbf{loop:}
	mulss	(%rax,%rdx,4), %xmm0	# Multiply acc by data[i]
	addq	$1, %rdx		# Increment i
	cmpq	%rdx, %rbp		# Compare limit:i
	jg	.L488			# If >, goto \textbf{loop}
/* $end fpb-combine4-s 3297 */
.L487:
	movss	%xmm0, (%r12)
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

combine3w:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	movq	%rdi, %rbx
	movq	%rsi, %r12
	call	vec_length
	movq	%rax, %rbp
	movq	%rbx, %rdi
	call	get_vec_start
	testq	%rbp, %rbp
	jle	.L494
	movl	$0, %edx
	movss	.LC2(%rip), %xmm0
.L493:
	mulss	(%rax,%rdx,4), %xmm0
	movss	%xmm0, (%r12)
	addq	$1, %rdx
	cmpq	%rdx, %rbp
	jg	.L493
.L494:
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

combine3:
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	movq	%rdi, %rbx
	movq	%rsi, %rbp
	call	vec_length
	movq	%rax, %r12
	movq	%rbx, %rdi
	call	get_vec_start
	movl	$0x3f800000, (%rbp)
	testq	%r12, %r12
	jle	.L499
	movl	$0, %edx
/* $begin fpb-combine3-s 3349 */
# combine3: data_t = float, OP = *
# i in \rdxreg, data in \raxreg, dest in \rbpreg
.L498:				      # \textbf{loop:}
	movss	(%rbp), %xmm0		# Read product from dest      #line:opt:combine3:load
	mulss	(%rax,%rdx,4), %xmm0	# Multiply product by data[i]
	movss	%xmm0, (%rbp)		# Store product at dest 
	addq	$1, %rdx		# Increment i
	cmpq	%rdx, %r12		# Compare i:limit
	jg	.L498			# If >, goto \textbf{loop}
/* $end fpb-combine3-s 3349 */

/* $begin fpb-combine3-O1-s 3349 */
# combine3: data_t = float, OP = *, compiled -O1
# i in \rdxreg, data in \raxreg, dest in \rbpreg
.L498:				      # \textbf{loop:}
	movss	(%rbp), %xmm0		# Read product from dest
	mulss	(%rax,%rdx,4), %xmm0	# Multiply product by data[i]
	movss	%xmm0, (%rbp)		# Store product at dest 
	addq	$1, %rdx		# Increment i
	cmpq	%rdx, %r12		# Compare i:limit
	jg	.L498			# If >, goto \textbf{loop}
/* $end fpb-combine3-O1-s 3349 */

.L499:
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret

combine2:
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$16, %rsp
	movq	%rdi, %r13
	movq	%rsi, %rbp
	call	vec_length
	movq	%rax, %r12
	movl	$0x3f800000, (%rbp)
	testq	%rax, %rax
	jle	.L504
	movl	$0, %ebx
	leaq	12(%rsp), %r14
.L503:
	movq	%r14, %rdx
	movq	%rbx, %rsi
	movq	%r13, %rdi
	call	get_vec_element
	movss	(%rbp), %xmm0
	mulss	12(%rsp), %xmm0
	movss	%xmm0, (%rbp)
	addq	$1, %rbx
	cmpq	%rbx, %r12
	jg	.L503
.L504:
	addq	$16, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	ret

combine1:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, %r12
	movq	%rsi, %rbp
	movl	$0x3f800000, (%rsi)
	movl	$0, %ebx
	leaq	20(%rsp), %r13
	jmp	.L507
.L508:
	movq	%r13, %rdx
	movq	%rbx, %rsi
	movq	%r12, %rdi
	call	get_vec_element
	movss	(%rbp), %xmm0
	mulss	20(%rsp), %xmm0
	movss	%xmm0, (%rbp)
	addq	$1, %rbx
.L507:
	movq	%r12, %rdi
	call	vec_length
	cmpq	%rax, %rbx
	jl	.L508
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

combine1_descr:
combine2_descr:
combine3_descr:
combine3w_descr:
combine4_descr:
combine4b_descr:
combine4p_descr:
combine5_descr:
unroll3a_descr:
combine5p_descr:
unroll2aw_descr:
unroll4a_descr:
unroll5a_descr:
unroll6a_descr:
unroll8a_descr:
unroll16a_descr:
unroll2_descr:
unroll3_descr:
unroll4_descr:
unroll8_descr:
unroll16_descr:
combine6_descr:
unroll4x2a_descr:
unroll8x2a_descr:
unroll3x3a_descr:
unroll4x4a_descr:
unroll8x4a_descr:
unroll12x6a_descr:
unroll12x12a_descr:
unroll5x5a_descr:
unroll6x6a_descr:
unroll8x8a_descr:
unroll10x10a_descr:
unrollx2as_descr:
unroll4x2as_descr:
unroll8x2_descr:
unroll9x3_descr:
unroll8x4_descr:
unroll8x8_descr:
combine7_descr:
unroll3aa_descr:
unroll4aa_descr:
unroll5aa_descr:
unroll6aa_descr:
unroll8aa_descr:
simd_v1_descr:
simd_v2_descr:
simd_v4_descr:
simd_v8_descr:
simd_v12_descr:
simd_v2a_descr:
simd_v4a_descr:
simd_v8a_descr:
.Lframe0:
.Lframe1:
.Letext0:
.Ldebug_loc0:
.Ldebug_ranges0:
