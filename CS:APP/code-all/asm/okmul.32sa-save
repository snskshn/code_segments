	.file	"okmul.c"
.globl dummy
	.bss
	.align 4
	.type	dummy, @object
	.size	dummy, 4
dummy:
	.zero	4
	.text
	.p2align 4,,15
.globl ok_smul1
	.type	ok_smul1, @function
ok_smul1:
	pushl	%ebp
	movl	%esp, %ebp
	movl	12(%ebp), %eax
	movl	16(%ebp), %edx
	imull	8(%ebp), %eax
	movl	%eax, (%edx)
#APP
	setae %al
#NO_APP
	leave
	xorl	%eax, %eax
	ret
	.size	ok_smul1, .-ok_smul1
	.p2align 4,,15
.globl ok_smul2
	.type	ok_smul2, @function
ok_smul2:
	pushl	%ebp
	movl	%esp, %ebp
	movl	12(%ebp), %eax
	movl	16(%ebp), %edx
	imull	8(%ebp), %eax
	movl	%eax, (%edx)
	movl	dummy, %eax
#APP
	setae %al
#NO_APP
	leave
	ret
	.size	ok_smul2, .-ok_smul2
	.p2align 4,,15
.globl ok_smul3
	.type	ok_smul3, @function
ok_smul3:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	12(%ebp), %eax
	movl	16(%ebp), %edx
	imull	8(%ebp), %eax
	movl	%eax, (%edx)
#APP
	setae %bl; movzbl %bl,%eax
#NO_APP
	popl	%ebx
	leave
	ret
	.size	ok_smul3, .-ok_smul3
	.p2align 4,,15
.globl ok_smul4
	.type	ok_smul4, @function
ok_smul4:
	pushl	%ebp
	movl	%esp, %ebp
	movl	12(%ebp), %eax
	movl	16(%ebp), %edx
	imull	8(%ebp), %eax
	movl	%eax, (%edx)
	leave
#APP
	setae %al
#NO_APP
	movzbl	%al, %eax
	ret
	.size	ok_smul4, .-ok_smul4
	.p2align 4,,15
.globl ok_umul
	.type	ok_umul, @function
ok_umul:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
/* $begin okumul-s 86 */
# Set up asm inputs	
	movl	12(%ebp), %ecx		# Load y into %ecx
	movl	8(%ebp), %ebx		# Load x into %ebx
/* $end okumul-s 86 */
#APP
/* $begin okumul-s 89 */
# The following instructions were generated by asm.
	# Input registers: %ebx for x, %ecx for y
	# Output registers: %ebx for product, %ecx for result 
	movl %ebx,%eax; mull %ecx; movl %eax,%ebx; setae %dl; movzbl %dl,%ecx
/* $end okumul-s 89 */
#NO_APP
/* $begin okumul-s 91 */
	movl	16(%ebp), %eax		# Load dest into %eax
	movl	%ebx, (%eax)		# Store product at dest
	movl	%ecx, %eax		# Set result as return value
/* $end okumul-s 91 */
	popl	%ebx
	leave
	ret
	.size	ok_umul, .-ok_umul
	.p2align 4,,15
.globl ok_umul2
	.type	ok_umul2, @function
ok_umul2:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %ecx
	movl	12(%ebp), %edx
#APP
	movl %ecx,%eax; mull %edx; movl %eax,%ecx; setae %dl
#NO_APP
	movl	16(%ebp), %eax
	movl	%ecx, (%eax)
	leave
	movzbl	%dl, %eax
	ret
	.size	ok_umul2, .-ok_umul2
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"Enter sx:"
.LC1:
	.string	"%d"
.LC2:
	.string	"Enter sy:"
	.section	.rodata.str1.4,"aMS",@progbits,1
	.align 4
.LC3:
	.string	"ok_smul1: %d*%d=%d does not overflow\n"
	.align 4
.LC5:
	.string	"ok_smul2: %d*%d=%d does not overflow\n"
	.align 4
.LC7:
	.string	"ok_smul3: %d*%d=%d does not overflow\n"
	.align 4
.LC9:
	.string	"ok_smul4: %d*%d=%d does not overflow\n"
	.section	.rodata.str1.1
.LC11:
	.string	"Enter ux:"
.LC12:
	.string	"%u"
.LC13:
	.string	"Enter uy:"
	.section	.rodata.str1.4
	.align 4
.LC14:
	.string	"ok_umul: %u*%u=%u does not overflow\n"
	.align 4
.LC16:
	.string	"ok_umul2: %u*%u=%u does not overflow\n"
	.section	.rodata.str1.1
.LC4:
	.string	"ok_smul1: %d*%d=%d overflows\n"
.LC6:
	.string	"ok_smul2: %d*%d=%d overflows\n"
.LC8:
	.string	"ok_smul3: %d*%d=%d overflows\n"
.LC10:
	.string	"ok_smul4: %d*%d=%d overflows\n"
.LC17:
	.string	"ok_umul2: %u*%u=%u overflows\n"
.LC15:
	.string	"ok_umul: %u*%u=%u overflows\n"
	.text
	.p2align 4,,15
.globl main
	.type	main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	leal	-16(%ebp), %ebx
	subl	$52, %esp
	andl	$-16, %esp
	subl	$16, %esp
	movl	$.LC0, (%esp)
	call	printf
	leal	-8(%ebp), %eax
	movl	$.LC1, (%esp)
	movl	%eax, 4(%esp)
	call	scanf
	movl	$.LC2, (%esp)
	call	printf
	leal	-12(%ebp), %eax
	movl	$.LC1, (%esp)
	movl	%eax, 4(%esp)
	call	scanf
	movl	-12(%ebp), %eax
	movl	%ebx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	ok_smul1
	testl	%eax, %eax
	je	.L8
	movl	-16(%ebp), %eax
	movl	$.LC3, (%esp)
	movl	%eax, 12(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	call	printf
	movl	-12(%ebp), %eax
	movl	%ebx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	ok_smul2
	testl	%eax, %eax
	je	.L10
.L27:
	movl	-16(%ebp), %eax
	movl	$.LC5, (%esp)
	movl	%eax, 12(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	call	printf
	movl	-12(%ebp), %eax
	movl	%ebx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	ok_smul3
	testl	%eax, %eax
	je	.L12
.L28:
	movl	-16(%ebp), %eax
	movl	$.LC7, (%esp)
	movl	%eax, 12(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	call	printf
	movl	-12(%ebp), %eax
	movl	%ebx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	ok_smul4
	testl	%eax, %eax
	je	.L14
.L29:
	movl	-16(%ebp), %eax
	movl	$.LC9, (%esp)
	movl	%eax, 12(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
.L23:
	call	printf
	movl	$.LC11, (%esp)
	leal	-28(%ebp), %ebx
	call	printf
	leal	-20(%ebp), %eax
	movl	$.LC12, (%esp)
	movl	%eax, 4(%esp)
	call	scanf
	movl	$.LC13, (%esp)
	call	printf
	leal	-24(%ebp), %eax
	movl	$.LC12, (%esp)
	movl	%eax, 4(%esp)
	call	scanf
	movl	-24(%ebp), %eax
	movl	%ebx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	ok_umul
	testl	%eax, %eax
	je	.L16
	movl	-28(%ebp), %eax
	movl	$.LC14, (%esp)
	movl	%eax, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
.L24:
	call	printf
	movl	-24(%ebp), %eax
	movl	%ebx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	ok_umul2
	testl	%eax, %eax
	je	.L18
	movl	-28(%ebp), %eax
	movl	$.LC16, (%esp)
	movl	%eax, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
.L25:
	call	printf
	movl	$0, (%esp)
	call	exit
	.p2align 4,,7
.L8:
	movl	-16(%ebp), %eax
	movl	$.LC4, (%esp)
	movl	%eax, 12(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	call	printf
	movl	-12(%ebp), %eax
	movl	%ebx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	ok_smul2
	testl	%eax, %eax
	jne	.L27
.L10:
	movl	-16(%ebp), %eax
	movl	$.LC6, (%esp)
	movl	%eax, 12(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	call	printf
	movl	-12(%ebp), %eax
	movl	%ebx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	ok_smul3
	testl	%eax, %eax
	jne	.L28
.L12:
	movl	-16(%ebp), %eax
	movl	$.LC8, (%esp)
	movl	%eax, 12(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	call	printf
	movl	-12(%ebp), %eax
	movl	%ebx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	ok_smul4
	testl	%eax, %eax
	jne	.L29
.L14:
	movl	-16(%ebp), %eax
	movl	$.LC10, (%esp)
	movl	%eax, 12(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	jmp	.L23
	.p2align 4,,7
.L18:
	movl	-28(%ebp), %eax
	movl	$.LC17, (%esp)
	movl	%eax, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	jmp	.L25
	.p2align 4,,7
.L16:
	movl	-28(%ebp), %eax
	movl	$.LC15, (%esp)
	movl	%eax, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	jmp	.L24
	.size	main, .-main
	.section	.note.GNU-stack,"",@progbits
	.ident	"GCC: (GNU) 3.4.2 20041017 (Red Hat 3.4.2-6.fc3)"
