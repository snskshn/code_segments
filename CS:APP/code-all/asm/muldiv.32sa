	.file	"muldiv.c"
	.text
.globl shrink
	.type	shrink, @function
shrink:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	popl	%ebp
	ret
	.size	shrink, .-shrink
.globl prod
	.type	prod, @function
prod:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$16, %esp
	movl	%ebx, -8(%ebp)
	movl	%esi, -4(%ebp)
/* $begin imull-s 20 */
	# x at \ebpreg+8, y at \ebpreg+12
	movl	12(%ebp), %eax	# Put y in \eaxreg
	imull	8(%ebp)		# Multiply by x
/* $end imull-s 20 */
	movl	%eax, %ebx
	movl	%edx, %esi
/* $begin imull-s 24 */
	movl	%eax, (%esp)	# Store low-order 32 bits
	movl	%edx, 4(%esp)	# Store high-order 32 bits
/* $end imull-s 24 */
	call	shrink
	addl	%ebx, %eax
	addl	%esi, %eax
	movl	-8(%ebp), %ebx
	movl	-4(%ebp), %esi
	movl	%ebp, %esp
	popl	%ebp
	ret
	.size	prod, .-prod
.globl combine
	.type	combine, @function
combine:
	pushl	%ebp
	movl	%esp, %ebp
	movl	12(%ebp), %eax
	addl	8(%ebp), %eax
	popl	%ebp
	ret
	.size	combine, .-combine
.globl div
	.type	div, @function
div:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$16, %esp
	movl	%ebx, -8(%ebp)
	movl	%esi, -4(%ebp)
/* $begin divl-s 53 */
	# x at \ebpreg+8, y at \ebpreg+12
	movl	8(%ebp), %edx	# Put x in \edxreg # line:asm:muldiv:getx
	movl	%edx, %eax	# Copy x to \eaxreg # line:asm:muldiv:copyx
	sarl	$31, %edx	# Sign extend x in \edxreg # line:asm:muldiv:signextend
	idivl	12(%ebp)	# Divide by y
/* $end divl-s 53 */
	movl	%edx, %ebx
	movl	%eax, %esi
/* $begin divl-s 59 */
	movl	%eax, 4(%esp)	# Store x / y # line:asm:muldiv:storeq
	movl	%edx, (%esp)	# Store x % y # line:asm:muldiv:storer
/* $end divl-s 59 */
	call	combine
	leal	(%esi,%ebx), %edx
	leal	(%edx,%eax), %eax
	movl	-8(%ebp), %ebx
	movl	-4(%ebp), %esi
	movl	%ebp, %esp
	popl	%ebp
	ret
	.size	div, .-div
	.ident	"GCC: (Ubuntu 4.3.2-1ubuntu11) 4.3.2"
	.section	.note.GNU-stack,"",@progbits
