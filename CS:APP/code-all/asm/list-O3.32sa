	.file	"list-O3.c"
	.text
	.p2align 4,,15
.globl max
	.type	max, @function
max:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	12(%ebp), %edx
	popl	%ebp
	cmpl	%eax, %edx
	cmovge	%edx, %eax
	ret
	.size	max, .-max
	.p2align 4,,15
.globl head
	.type	head, @function
head:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	popl	%ebp
	movl	(%eax), %eax
	ret
	.size	head, .-head
	.p2align 4,,15
.globl tail
	.type	tail, @function
tail:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	popl	%ebp
	movl	4(%eax), %eax
	ret
	.size	tail, .-tail
	.p2align 4,,15
.globl is_null
	.type	is_null, @function
is_null:
	pushl	%ebp
	xorl	%eax, %eax
	movl	%esp, %ebp
	cmpl	$0, 8(%ebp)
	popl	%ebp
	sete	%al
	ret
	.size	is_null, .-is_null
	.p2align 4,,15
.globl sum_list_rec
	.type	sum_list_rec, @function
/* $begin sum_list_rec-s 48 */
# Code generated for recursive version of list sum
# with optimization level -O3
# ls at \ebpreg+8
sum_list_rec:
	pushl	%ebp		
	xorl	%ecx, %ecx	# Set sum = 0
	movl	%esp, %ebp	
	movl	8(%ebp), %edx	# Get ls
	testl	%edx, %edx	
	je	.L14  		# If ls == NULL, goto \textbf{done}
	.p2align 4,,7		# (Inserted to improve instruction alignment)
	.p2align 3
# Within loop: ls in \edxreg, sum in \ecxreg{}
.L17:			      # \textbf{loop:}
	movl	(%edx), %eax  	# Get val = ls->val
	movl	4(%edx), %edx	# Set ls = ls->next
	addl	%eax, %ecx	# Add val to sum
	testl	%edx, %edx	
	jne	.L17  		# If ls != NULL, goto \textbf{loop}
.L14:			      # \textbf{done:}
	movl	%ecx, %eax    	# Set result = sum
	popl	%ebp  		# Restore frame pointer
	ret			# Return
/* $end sum_list_rec-s 48 */
	.size	sum_list_rec, .-sum_list_rec
	.p2align 4,,15
.globl diff_list_rec_helper
	.type	diff_list_rec_helper, @function
diff_list_rec_helper:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	pushl	%ebx
	xorl	%ebx, %ebx
	movl	12(%ebp), %ecx
	testl	%edx, %edx
	je	.L19
	.p2align 4,,7
	.p2align 3
.L22:
	movl	%ecx, %eax
	negl	%ecx
	imull	(%edx), %eax
	movl	4(%edx), %edx
	addl	%eax, %ebx
	testl	%edx, %edx
	jne	.L22
.L19:
	movl	%ebx, %eax
	popl	%ebx
	popl	%ebp
	ret
	.size	diff_list_rec_helper, .-diff_list_rec_helper
	.p2align 4,,15
.globl diff_list_rec2
	.type	diff_list_rec2, @function
diff_list_rec2:
	pushl	%ebp
	movl	$1, %ecx
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	pushl	%ebx
	xorl	%ebx, %ebx
	testl	%edx, %edx
	je	.L26
	.p2align 4,,7
	.p2align 3
.L29:
	movl	%ecx, %eax
	negl	%ecx
	imull	(%edx), %eax
	movl	4(%edx), %edx
	addl	%eax, %ebx
	testl	%edx, %edx
	jne	.L29
.L26:
	movl	%ebx, %eax
	popl	%ebx
	popl	%ebp
	ret
	.size	diff_list_rec2, .-diff_list_rec2
	.p2align 4,,15
.globl sum_list_rec_abs
	.type	sum_list_rec_abs, @function
sum_list_rec_abs:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	testl	%edx, %edx
	je	.L33
	.p2align 4,,7
	.p2align 3
.L36:
	movl	(%edx), %eax
	movl	4(%edx), %edx
	addl	%eax, %ecx
	testl	%edx, %edx
	jne	.L36
.L33:
	movl	%ecx, %eax
	popl	%ebp
	ret
	.size	sum_list_rec_abs, .-sum_list_rec_abs
	.p2align 4,,15
.globl sum_list_tail
	.type	sum_list_tail, @function
sum_list_tail:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	movl	12(%ebp), %eax
	testl	%edx, %edx
	je	.L39
	.p2align 4,,7
	.p2align 3
.L42:
	addl	(%edx), %eax
	movl	4(%edx), %edx
	testl	%edx, %edx
	jne	.L42
.L39:
	popl	%ebp
	ret
	.size	sum_list_tail, .-sum_list_tail
	.p2align 4,,15
.globl sum_list_tail_call
	.type	sum_list_tail_call, @function
sum_list_tail_call:
	pushl	%ebp
	xorl	%eax, %eax
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	testl	%edx, %edx
	je	.L46
	.p2align 4,,7
	.p2align 3
.L49:
	addl	(%edx), %eax
	movl	4(%edx), %edx
	testl	%edx, %edx
	jne	.L49
.L46:
	popl	%ebp
	ret
	.size	sum_list_tail_call, .-sum_list_tail_call
	.p2align 4,,15
.globl sum_list_iter
	.type	sum_list_iter, @function
/* $begin sum_list_iter-s 220 */
# Code generated for iterative version of list sum
# with optimization level -O3
# ls at \ebpreg+8
sum_list_iter:
	pushl	%ebp		
	xorl	%eax, %eax	# Set sum = 0
	movl	%esp, %ebp	
	movl	8(%ebp), %edx	# Get ls
	testl	%edx, %edx	
	je	.L62  		# if ls == NULL, goto \textbf{done}
	.p2align 4,,7		# (Inserted to improve instruction alignment)
	.p2align 3
# Within loop: ls in \edxreg, sum in \eaxreg{} 
.L65:	       	     	      # \textbf{loop:} # line:asm:sum_list_iter:lbegin
	addl	(%edx), %eax    # Add ls->val to sum
	movl	4(%edx), %edx	# Set ls = ls->next
	testl	%edx, %edx	
	jne	.L65  		# If ls == NULL, goto \textbf{loop} # line:asm:sum_list_iter:lend
.L62:			      # \textbf{done:}
	popl	%ebp	        
	ret			
/* $end sum_list_iter-s 220 */
	.size	sum_list_iter, .-sum_list_iter
	.p2align 4,,15
.globl max_list_tail
	.type	max_list_tail, @function
max_list_tail:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	movl	12(%ebp), %ecx
	testl	%edx, %edx
	je	.L59
	.p2align 4,,7
	.p2align 3
.L62:
	movl	(%edx), %eax
	movl	4(%edx), %edx
	cmpl	%eax, %ecx
	cmovl	%eax, %ecx
	testl	%edx, %edx
	jne	.L62
.L59:
	movl	%ecx, %eax
	popl	%ebp
	ret
	.size	max_list_tail, .-max_list_tail
	.p2align 4,,15
.globl max_list_tail_call
	.type	max_list_tail_call, @function
max_list_tail_call:
	pushl	%ebp
	movl	$-2147483648, %ecx
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	testl	%edx, %edx
	je	.L66
	.p2align 4,,7
	.p2align 3
.L69:
	movl	(%edx), %eax
	movl	4(%edx), %edx
	cmpl	%eax, %ecx
	cmovl	%eax, %ecx
	testl	%edx, %edx
	jne	.L69
.L66:
	movl	%ecx, %eax
	popl	%ebp
	ret
	.size	max_list_tail_call, .-max_list_tail_call
	.p2align 4,,15
.globl new_ele
	.type	new_ele, @function
new_ele:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	movl	$8, (%esp)
	call	malloc
	movl	8(%ebp), %edx
	movl	%edx, (%eax)
	leave
	ret
	.size	new_ele, .-new_ele
	.p2align 4,,15
.globl diff_list_rec
	.type	diff_list_rec, @function
/* $begin diff_list_rec-O3-s-p1 508 */
# Code generated for recursive version of list difference
# with optimization level -O3
# ls at \ebpreg+8
diff_list_rec:
	pushl	%ebp
	xorl	%eax, %eax	# Set diff to 0
	movl	%esp, %ebp
	subl	$40, %esp	
# ls in register %edx, diff in register %eax
	movl	8(%ebp), %edx
	movl	%ebx, -12(%ebp)
	movl	%esi, -8(%ebp)
	movl	%edi, -4(%ebp)
	testl	%edx, %edx	
	je	.L133 		# If ls==NULL, goto \textbf{len_0}
# Step through up to 8 elements of list, storing  values in registers and on stack
	movl	(%edx), %esi    # Set %esi to l_1
	xorl	%eax, %eax	# Set diff to 0	
	movl	4(%edx), %edx	# ls = ls->next
	testl	%edx, %edx
	je	.L135		# If ls==NULL, goto \textbf{len_1}
# ls in register %eax, diff in register %edx
	movl	4(%edx), %eax	# ls = ls->next  # line:asm:diff_list_rec:lschange
	movl	(%edx), %edi	# Set %edi to l_2
	xorl	%edx, %edx	# Set diff to 0
	testl	%eax, %eax
	je	.L137		# IF ls==NULL, goto \textbf{len_2}
	movl	(%eax), %edx	
	movl	4(%eax), %eax	# ls = ls->next
	movl	%edx, -36(%ebp) # Store l_3 at %ebp-36
	xorl	%edx, %edx
	testl	%eax, %eax
	je	.L139		# If ls==NULL, goto \textbf{len_3}
/* $end diff_list_rec-O3-s-p1 508 */
/* $begin diff_list_rec-O3-s-p2 535 */
	movl	(%eax), %edx
	movl	4(%eax), %eax	# ls = ls->next
	movl	%edx, -32(%ebp)	# Store l_4 at %ebp-32
	xorl	%edx, %edx	# Set diff to 0
	testl	%eax, %eax	
	je	.L141 		# If ls==NULL, goto \textbf{len_4}
	movl	(%eax), %edx	
	movl	4(%eax), %eax	# ls = ls->next
	movl	%edx, -28(%ebp) # Store l_5 at %ebp-28
	xorl	%edx, %edx	# Set diff to 0
	testl	%eax, %eax
	je	.L143		# If ls==NULL, goto \textbf{len_5}
	movl	(%eax), %edx
	movl	4(%eax), %eax	# ls = ls->next
	movl	%edx, -24(%ebp)	# Store l_6 at %ebp-24
	xorl	%edx, %edx	# Set diff to 0
	testl	%eax, %eax
	je	.L145		# If ls==NULL, goto \textbf{len_6}
	movl	(%eax), %edx
	movl	4(%eax), %eax	# ls = ls->next
	movl	%edx, -20(%ebp)	# Store l_7 at %ebp-20
	xorl	%edx, %edx	# Set diff to 0
	testl	%eax, %eax
	je	.L147		# If ls==NULL, goto \textbf{len_7}
	movl	(%eax), %edx
	movl	4(%eax), %eax	# ls = ls->next
	movl	%edx, -16(%ebp)	# Store l_8 at %ebp-16
	xorl	%edx, %edx	# Set diff to 0
	testl	%eax, %eax
	je	.L149		# If ls==NULL, goto \textbf{len_8}
# Reach here only if list has >= 9 elements
	movl	(%eax), %ebx  	# Set %ebx to l_9
	movl	4(%eax), %eax	# ls = ls->next
	movl	%eax, (%esp)
# Make recursive call to compute difference for rest of list
	call	diff_list_rec	# diff = diff_list_rec(ls)
/* $end diff_list_rec-O3-s-p2 535 */
/* $begin diff_list_rec-O3-s-p3 569 */
# Accumulate values for first nine elements of list, in reverse order
	movl	%ebx, %edx	# Retrieve l_9
	subl	%eax, %edx	# diff = l_9 - diff
.L149:			      # \textbf{len_8:}
	movl	-16(%ebp), %eax	# Retrieve l_8
	subl	%edx, %eax      
	movl	%eax, %edx	# diff = l_8 - diff
.L147:			      # \textbf{len_7:}
	movl	-20(%ebp), %eax	# Retrieve l_7
	subl	%edx, %eax
	movl	%eax, %edx	# diff = l_7 - diff
.L145:			      # \textbf{len_6:}
	movl	-24(%ebp), %eax	# Retrieve l_6
	subl	%edx, %eax
	movl	%eax, %edx	# diff = l_6 - diff
.L143:			      # \textbf{len_5:}
	movl	-28(%ebp), %eax	# Retrieve l_5
	subl	%edx, %eax
	movl	%eax, %edx	# diff = l_5 - diff
.L141:			      # \textbf{len_4:}
	movl	-32(%ebp), %eax	# Retrieve l_4
	subl	%edx, %eax
	movl	%eax, %edx	# diff = l_4 - diff
.L139:			      # \textbf{len_3:}
	movl	-36(%ebp), %eax	# Retrieve l_3
	subl	%edx, %eax
	movl	%eax, %edx	# diff = l_3 - diff
.L137:			      # \textbf{len_2:}
	movl	%edi, %eax	# Retrieve l_2
	subl	%edx, %eax	# diff = l_2 - diff
.L135:			      # \textbf{len_1:}
	subl	%eax, %esi	# Retrieve l_1
	movl	%esi, %eax	# diff = l_1 - diff
.L133:			      # \textbf{len_0:}
	movl	-12(%ebp), %ebx
	movl	-8(%ebp), %esi
	movl	-4(%ebp), %edi
	movl	%ebp, %esp
	popl	%ebp
	ret			# Return diff
/* $end diff_list_rec-O3-s-p3 569 */

	.size	diff_list_rec, .-diff_list_rec
	.p2align 4,,15
.globl max_list_rec
	.type	max_list_rec, @function
max_list_rec:
	pushl	%ebp
	movl	$-2147483648, %eax
	movl	%esp, %ebp
	subl	$40, %esp
	movl	%ebx, -12(%ebp)
	movl	8(%ebp), %ebx
	movl	%esi, -8(%ebp)
	movl	%edi, -4(%ebp)
	testl	%ebx, %ebx
	je	.L95
	movl	8(%ebp), %eax
	movl	$-2147483648, %edx
	movl	4(%eax), %ebx
	testl	%ebx, %ebx
	je	.L97
	movl	4(%ebx), %esi
	movl	$-2147483648, %eax
	testl	%esi, %esi
	je	.L99
	movl	4(%esi), %ecx
	movl	$-2147483648, %edx
	testl	%ecx, %ecx
	movl	%ecx, -32(%ebp)
	je	.L101
	movl	4(%ecx), %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %ecx
	movl	$-2147483648, %eax
	testl	%ecx, %ecx
	je	.L103
	movl	-28(%ebp), %ecx
	movl	$-2147483648, %edx
	movl	4(%ecx), %ecx
	testl	%ecx, %ecx
	movl	%ecx, -24(%ebp)
	je	.L105
	movl	4(%ecx), %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %edx
	movl	$-2147483648, %eax
	testl	%edx, %edx
	je	.L107
	movl	-20(%ebp), %ecx
	movl	$-2147483648, %edx
	movl	4(%ecx), %ecx
	testl	%ecx, %ecx
	movl	%ecx, -16(%ebp)
	je	.L109
	movl	4(%ecx), %edi
	movl	%ecx, %eax
	movl	$-2147483648, %ecx
	testl	%edi, %edi
	je	.L111
	movl	4(%edi), %eax
	movl	%eax, (%esp)
	call	max_list_rec
	movl	(%edi), %ecx
	cmpl	%ecx, %eax
	cmovge	%eax, %ecx
	movl	-16(%ebp), %eax
.L111:
	movl	(%eax), %edx
	cmpl	%ecx, %edx
	cmovle	%ecx, %edx
.L109:
	movl	-20(%ebp), %ecx
	movl	(%ecx), %eax
	cmpl	%edx, %eax
	cmovle	%edx, %eax
.L107:
	movl	-24(%ebp), %ecx
	movl	(%ecx), %edx
	cmpl	%eax, %edx
	cmovle	%eax, %edx
.L105:
	movl	-28(%ebp), %ecx
	movl	(%ecx), %eax
	cmpl	%edx, %eax
	cmovle	%edx, %eax
.L103:
	movl	-32(%ebp), %ecx
	movl	(%ecx), %edx
	cmpl	%eax, %edx
	cmovle	%eax, %edx
.L101:
	movl	(%esi), %eax
	cmpl	%edx, %eax
	cmovle	%edx, %eax
.L99:
	movl	(%ebx), %edx
	cmpl	%eax, %edx
	cmovle	%eax, %edx
.L97:
	movl	8(%ebp), %ecx
	movl	(%ecx), %eax
	cmpl	%eax, %edx
	cmovge	%edx, %eax
.L95:
	movl	-12(%ebp), %ebx
	movl	-8(%ebp), %esi
	movl	-4(%ebp), %edi
	movl	%ebp, %esp
	popl	%ebp
	ret
	.size	max_list_rec, .-max_list_rec
	.p2align 4,,15
.globl dsum_list_rec
	.type	dsum_list_rec, @function
dsum_list_rec:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	movl	8(%ebp), %eax
	movl	%ebx, -12(%ebp)
	movl	%esi, -8(%ebp)
	movl	%edi, -4(%ebp)
	testl	%eax, %eax
	je	.L133
	movl	(%eax), %ebx
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L134
	movl	(%eax), %esi
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L135
	movl	(%eax), %edi
	movl	4(%eax), %eax
	testl	%eax, %eax
	je	.L136
	movl	(%eax), %edx
	movl	4(%eax), %eax
	movl	%edx, -44(%ebp)
	testl	%eax, %eax
	je	.L137
	movl	(%eax), %edx
	movl	4(%eax), %eax
	movl	%edx, -40(%ebp)
	testl	%eax, %eax
	je	.L138
	movl	(%eax), %edx
	movl	4(%eax), %eax
	movl	%edx, -36(%ebp)
	testl	%eax, %eax
	je	.L139
	movl	(%eax), %edx
	movl	4(%eax), %eax
	movl	%edx, -32(%ebp)
	testl	%eax, %eax
	je	.L140
	movl	(%eax), %edx
	movl	4(%eax), %eax
	movl	%edx, -28(%ebp)
	testl	%eax, %eax
	je	.L141
	fildl	(%eax)
	movl	4(%eax), %eax
	fstpl	-24(%ebp)
	movl	%eax, (%esp)
	call	dsum_list_rec
	faddl	-24(%ebp)
.L131:
	fildl	-28(%ebp)
	faddp	%st, %st(1)
.L129:
	fildl	-32(%ebp)
	faddp	%st, %st(1)
.L127:
	fildl	-36(%ebp)
	faddp	%st, %st(1)
.L125:
	fildl	-40(%ebp)
	faddp	%st, %st(1)
.L123:
	fildl	-44(%ebp)
	faddp	%st, %st(1)
.L121:
	pushl	%edi
	fildl	(%esp)
	addl	$4, %esp
	faddp	%st, %st(1)
.L119:
	pushl	%esi
	fildl	(%esp)
	addl	$4, %esp
	faddp	%st, %st(1)
.L117:
	pushl	%ebx
	fildl	(%esp)
	addl	$4, %esp
	faddp	%st, %st(1)
	jmp	.L115
	.p2align 4,,7
	.p2align 3
.L133:
	fldz
.L115:
	movl	-12(%ebp), %ebx
	movl	-8(%ebp), %esi
	movl	-4(%ebp), %edi
	movl	%ebp, %esp
	popl	%ebp
	ret
	.p2align 4,,7
	.p2align 3
.L135:
	fldz
	jmp	.L119
	.p2align 4,,7
	.p2align 3
.L138:
	fldz
	jmp	.L125
	.p2align 4,,7
	.p2align 3
.L134:
	fldz
	.p2align 4,,5
	.p2align 3
	jmp	.L117
	.p2align 4,,7
	.p2align 3
.L136:
	fldz
	.p2align 4,,5
	.p2align 3
	jmp	.L121
	.p2align 4,,7
	.p2align 3
.L137:
	fldz
	.p2align 4,,5
	.p2align 3
	jmp	.L123
	.p2align 4,,7
	.p2align 3
.L139:
	fldz
	.p2align 4,,5
	.p2align 3
	jmp	.L127
	.p2align 4,,7
	.p2align 3
.L140:
	fldz
	.p2align 4,,5
	.p2align 3
	jmp	.L129
	.p2align 4,,7
	.p2align 3
.L141:
	fldz
	.p2align 4,,5
	.p2align 3
	jmp	.L131
	.size	dsum_list_rec, .-dsum_list_rec
	.ident	"GCC: (Ubuntu 4.3.2-1ubuntu11) 4.3.2"
	.section	.note.GNU-stack,"",@progbits
