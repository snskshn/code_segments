	.file	"swapadd.c"
	.text
	.p2align 4,,15
.globl swap_add
	.type	swap_add, @function
/* $begin swapadd-setup-s 6 */
swap_add:
	pushl	%ebp		# Save old \ebpreg
	movl	%esp, %ebp	# Set \ebpreg{} as frame pointer
	pushl	%ebx		# Save \ebxreg
/* $end swapadd-setup-s 6 */

/* $begin swapadd-body-s 10 */
	movl	8(%ebp), %ecx	# Get xp
	movl	12(%ebp), %ebx	# Get yp
	movl	(%ecx), %eax	# Get x
	movl	(%ebx), %edx	# Get y
	movl	%edx, (%ecx)	# Store y at xp
	movl	%eax, (%ebx)	# Store x at yp
	addl	%edx, %eax	# Return value = x+y
/* $end swapadd-body-s 10 */

/* $begin swapadd-finish-s 17 */
	popl	%ebx		# Restore \ebxreg
	leave			# Restore \ebpreg{} and \espreg{}
	ret			# Return to caller
/* $end swapadd-finish-s 17 */

	.size	swap_add, .-swap_add
	.p2align 4,,15
.globl caller
	.type	caller, @function
caller:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$16, %esp
/* $begin swapadd-call-s 28 */
	leal	-4(%ebp), %eax	# Compute &arg1	
/* $end swapadd-call-s 28 */	
	movl	$534, -8(%ebp)	
	movl	$1057, -4(%ebp)
/* $begin swapadd-call-s 31 */
	movl	%eax, 4(%esp)	# Store on stack
	leal	-8(%ebp), %eax  # Compute &arg2
	movl	%eax, (%esp)	# Store on stack
	call	swap_add	# Call the swap_add function
/* $end swapadd-call-s 31 */

/* $begin swapadd-resume-s 35 */
	movl	-8(%ebp), %edx	# Resume here
/* $end swapadd-resume-s 35 */
	subl	-4(%ebp), %edx
	leave
	imull	%edx, %eax
	ret
	.size	caller, .-caller
	.section	.note.GNU-stack,"",@progbits
	.ident	"GCC: (GNU) 3.4.2 20041017 (Red Hat 3.4.2-6.fc3)"
